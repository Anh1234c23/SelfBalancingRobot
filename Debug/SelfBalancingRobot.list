
SelfBalancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067f0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006900  08006900  00007900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b0  080069b0  000080c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080069b0  080069b0  000080c4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080069b0  080069b0  000080c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069b0  080069b0  000079b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069b4  080069b4  000079b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  080069b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200000c4  08006a7c  000080c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08006a7c  00008418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000080c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efd8  00000000  00000000  000080ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb1  00000000  00000000  000170c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00018f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf3  00000000  00000000  00019e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e35  00000000  00000000  0001aa6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111b5  00000000  00000000  000328a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d359  00000000  00000000  00043a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0dae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000469c  00000000  00000000  000d0df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d5490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c4 	.word	0x200000c4
 800012c:	00000000 	.word	0x00000000
 8000130:	080068e8 	.word	0x080068e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c8 	.word	0x200000c8
 800014c:	080068e8 	.word	0x080068e8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpun>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__aeabi_fcmpun+0x14>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d108      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d102      	bne.n	8001090 <__aeabi_fcmpun+0x20>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d102      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	f04f 0001 	mov.w	r0, #1
 800109a:	4770      	bx	lr

0800109c <__aeabi_f2iz>:
 800109c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010a4:	d30f      	bcc.n	80010c6 <__aeabi_f2iz+0x2a>
 80010a6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ae:	d90d      	bls.n	80010cc <__aeabi_f2iz+0x30>
 80010b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010b8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010bc:	fa23 f002 	lsr.w	r0, r3, r2
 80010c0:	bf18      	it	ne
 80010c2:	4240      	negne	r0, r0
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	4770      	bx	lr
 80010cc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010d0:	d101      	bne.n	80010d6 <__aeabi_f2iz+0x3a>
 80010d2:	0242      	lsls	r2, r0, #9
 80010d4:	d105      	bne.n	80010e2 <__aeabi_f2iz+0x46>
 80010d6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010da:	bf08      	it	eq
 80010dc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010e0:	4770      	bx	lr
 80010e2:	f04f 0000 	mov.w	r0, #0
 80010e6:	4770      	bx	lr

080010e8 <MPU6050_Init>:
float PID_Compute(PID_t *pid, float input, float dt);
void ProcessBluetoothCommand(uint8_t command);

/* Private user code ---------------------------------------------------------*/
uint8_t MPU6050_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af04      	add	r7, sp, #16
    uint8_t check, Data;

    if (HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR << 1, 3, 1000) != HAL_OK) {
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	2203      	movs	r2, #3
 80010f4:	21d0      	movs	r1, #208	@ 0xd0
 80010f6:	4818      	ldr	r0, [pc, #96]	@ (8001158 <MPU6050_Init+0x70>)
 80010f8:	f002 fa90 	bl	800361c <HAL_I2C_IsDeviceReady>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MPU6050_Init+0x1e>
        return 1;
 8001102:	2301      	movs	r3, #1
 8001104:	e024      	b.n	8001150 <MPU6050_Init+0x68>
    }

    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR << 1, WHO_AM_I_REG, 1, &check, 1, 1000);
 8001106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	2301      	movs	r3, #1
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	2275      	movs	r2, #117	@ 0x75
 8001118:	21d0      	movs	r1, #208	@ 0xd0
 800111a:	480f      	ldr	r0, [pc, #60]	@ (8001158 <MPU6050_Init+0x70>)
 800111c:	f002 f80a 	bl	8003134 <HAL_I2C_Mem_Read>
    if (check != 0x68 && check != 0x70) {
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b68      	cmp	r3, #104	@ 0x68
 8001124:	d004      	beq.n	8001130 <MPU6050_Init+0x48>
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b70      	cmp	r3, #112	@ 0x70
 800112a:	d001      	beq.n	8001130 <MPU6050_Init+0x48>
        return 1;
 800112c:	2301      	movs	r3, #1
 800112e:	e00f      	b.n	8001150 <MPU6050_Init+0x68>
    }

    Data = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8001134:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	2301      	movs	r3, #1
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	1dbb      	adds	r3, r7, #6
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	226b      	movs	r2, #107	@ 0x6b
 8001146:	21d0      	movs	r1, #208	@ 0xd0
 8001148:	4803      	ldr	r0, [pc, #12]	@ (8001158 <MPU6050_Init+0x70>)
 800114a:	f001 fef9 	bl	8002f40 <HAL_I2C_Mem_Write>
    return 0;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200000e0 	.word	0x200000e0

0800115c <MPU6050_Read_Accel_Gyro>:

void MPU6050_Read_Accel_Gyro(int16_t *AccelData, int16_t *GyroData)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af04      	add	r7, sp, #16
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR << 1, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, 1000) == HAL_OK) {
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	230e      	movs	r3, #14
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	223b      	movs	r2, #59	@ 0x3b
 800117a:	21d0      	movs	r1, #208	@ 0xd0
 800117c:	4824      	ldr	r0, [pc, #144]	@ (8001210 <MPU6050_Read_Accel_Gyro+0xb4>)
 800117e:	f001 ffd9 	bl	8003134 <HAL_I2C_Mem_Read>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d13f      	bne.n	8001208 <MPU6050_Read_Accel_Gyro+0xac>
        AccelData[0] = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001188:	7a3b      	ldrb	r3, [r7, #8]
 800118a:	b21b      	sxth	r3, r3
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	7a7b      	ldrb	r3, [r7, #9]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21a      	sxth	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	801a      	strh	r2, [r3, #0]
        AccelData[1] = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800119c:	7abb      	ldrb	r3, [r7, #10]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b219      	sxth	r1, r3
 80011a4:	7afb      	ldrb	r3, [r7, #11]
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3302      	adds	r3, #2
 80011ac:	430a      	orrs	r2, r1
 80011ae:	b212      	sxth	r2, r2
 80011b0:	801a      	strh	r2, [r3, #0]
        AccelData[2] = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80011b2:	7b3b      	ldrb	r3, [r7, #12]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	b219      	sxth	r1, r3
 80011ba:	7b7b      	ldrb	r3, [r7, #13]
 80011bc:	b21a      	sxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3304      	adds	r3, #4
 80011c2:	430a      	orrs	r2, r1
 80011c4:	b212      	sxth	r2, r2
 80011c6:	801a      	strh	r2, [r3, #0]
        GyroData[0]  = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80011c8:	7c3b      	ldrb	r3, [r7, #16]
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	7c7b      	ldrb	r3, [r7, #17]
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	801a      	strh	r2, [r3, #0]
        GyroData[1]  = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80011dc:	7cbb      	ldrb	r3, [r7, #18]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b219      	sxth	r1, r3
 80011e4:	7cfb      	ldrb	r3, [r7, #19]
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	3302      	adds	r3, #2
 80011ec:	430a      	orrs	r2, r1
 80011ee:	b212      	sxth	r2, r2
 80011f0:	801a      	strh	r2, [r3, #0]
        GyroData[2]  = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80011f2:	7d3b      	ldrb	r3, [r7, #20]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b219      	sxth	r1, r3
 80011fa:	7d7b      	ldrb	r3, [r7, #21]
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3304      	adds	r3, #4
 8001202:	430a      	orrs	r2, r1
 8001204:	b212      	sxth	r2, r2
 8001206:	801a      	strh	r2, [r3, #0]
    }
}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000e0 	.word	0x200000e0

08001214 <CalibrateGyro>:

void CalibrateGyro(int16_t *GyroData, int samples)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
    gyroX_offset = 0.0f;
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <CalibrateGyro+0x24>)
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
    gyroY_offset = 0.0f;
 8001226:	4b05      	ldr	r3, [pc, #20]	@ (800123c <CalibrateGyro+0x28>)
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	2000020c 	.word	0x2000020c
 800123c:	20000210 	.word	0x20000210

08001240 <CalibrateAngles>:

void CalibrateAngles(float *pitch_offset, float *roll_offset, int samples)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
    *pitch_offset = 0.0f;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
    *roll_offset = -1.5f;
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4a03      	ldr	r2, [pc, #12]	@ (8001264 <CalibrateAngles+0x24>)
 8001258:	601a      	str	r2, [r3, #0]
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	bfc00000 	.word	0xbfc00000

08001268 <FilterGyro>:

void FilterGyro(float *gx, float *gy)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
    gx_buffer[filter_index] = *gx;
 8001272:	4b3a      	ldr	r3, [pc, #232]	@ (800135c <FilterGyro+0xf4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	4939      	ldr	r1, [pc, #228]	@ (8001360 <FilterGyro+0xf8>)
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    gy_buffer[filter_index] = *gy;
 8001280:	4b36      	ldr	r3, [pc, #216]	@ (800135c <FilterGyro+0xf4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	4936      	ldr	r1, [pc, #216]	@ (8001364 <FilterGyro+0xfc>)
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    float gx_sum = 0, gy_sum = 0;
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < FILTER_SIZE; i++) {
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	e016      	b.n	80012ce <FilterGyro+0x66>
        gx_sum += gx_buffer[i];
 80012a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001360 <FilterGyro+0xf8>)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	4619      	mov	r1, r3
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	f7ff fc12 	bl	8000ad4 <__addsf3>
 80012b0:	4603      	mov	r3, r0
 80012b2:	617b      	str	r3, [r7, #20]
        gy_sum += gy_buffer[i];
 80012b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001364 <FilterGyro+0xfc>)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012bc:	4619      	mov	r1, r3
 80012be:	6938      	ldr	r0, [r7, #16]
 80012c0:	f7ff fc08 	bl	8000ad4 <__addsf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < FILTER_SIZE; i++) {
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b13      	cmp	r3, #19
 80012d2:	dde5      	ble.n	80012a0 <FilterGyro+0x38>
    }
    *gx = gx_sum / FILTER_SIZE;
 80012d4:	4924      	ldr	r1, [pc, #144]	@ (8001368 <FilterGyro+0x100>)
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff fdb8 	bl	8000e4c <__aeabi_fdiv>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	601a      	str	r2, [r3, #0]
    *gy = gy_sum / FILTER_SIZE;
 80012e4:	4920      	ldr	r1, [pc, #128]	@ (8001368 <FilterGyro+0x100>)
 80012e6:	6938      	ldr	r0, [r7, #16]
 80012e8:	f7ff fdb0 	bl	8000e4c <__aeabi_fdiv>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	601a      	str	r2, [r3, #0]

    if (fabs(*gx) < GYRO_THRESHOLD) *gx = 0.0f;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012fc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fe8d 	bl	8001020 <__aeabi_fcmplt>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <FilterGyro+0xac>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
    if (fabs(*gy) < GYRO_THRESHOLD) *gy = 0.0f;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800131c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe7d 	bl	8001020 <__aeabi_fcmplt>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <FilterGyro+0xcc>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

    filter_index = (filter_index + 1) % FILTER_SIZE;
 8001334:	4b09      	ldr	r3, [pc, #36]	@ (800135c <FilterGyro+0xf4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	1c59      	adds	r1, r3, #1
 800133a:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <FilterGyro+0x104>)
 800133c:	fb83 2301 	smull	r2, r3, r3, r1
 8001340:	10da      	asrs	r2, r3, #3
 8001342:	17cb      	asrs	r3, r1, #31
 8001344:	1ad2      	subs	r2, r2, r3
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	1aca      	subs	r2, r1, r3
 8001350:	4b02      	ldr	r3, [pc, #8]	@ (800135c <FilterGyro+0xf4>)
 8001352:	601a      	str	r2, [r3, #0]
}
 8001354:	bf00      	nop
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200002bc 	.word	0x200002bc
 8001360:	2000021c 	.word	0x2000021c
 8001364:	2000026c 	.word	0x2000026c
 8001368:	41a00000 	.word	0x41a00000
 800136c:	66666667 	.word	0x66666667

08001370 <LowPassFilter>:

float LowPassFilter(float new_value, float old_value, float alpha)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
    return alpha * new_value + (1.0f - alpha) * old_value;
 800137c:	68f9      	ldr	r1, [r7, #12]
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fcb0 	bl	8000ce4 <__aeabi_fmul>
 8001384:	4603      	mov	r3, r0
 8001386:	461c      	mov	r4, r3
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800138e:	f7ff fb9f 	bl	8000ad0 <__aeabi_fsub>
 8001392:	4603      	mov	r3, r0
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fca4 	bl	8000ce4 <__aeabi_fmul>
 800139c:	4603      	mov	r3, r0
 800139e:	4619      	mov	r1, r3
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff fb97 	bl	8000ad4 <__addsf3>
 80013a6:	4603      	mov	r3, r0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <ControlMotor>:

void ControlMotor(int16_t left_pwm, int16_t right_pwm)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	460a      	mov	r2, r1
 80013ba:	80fb      	strh	r3, [r7, #6]
 80013bc:	4613      	mov	r3, r2
 80013be:	80bb      	strh	r3, [r7, #4]
    // Giới hạn giá trị PWM
    if (left_pwm > MAX_PWM) left_pwm = MAX_PWM;
 80013c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80013c8:	dd02      	ble.n	80013d0 <ControlMotor+0x20>
 80013ca:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013ce:	80fb      	strh	r3, [r7, #6]
    if (left_pwm < -MAX_PWM) left_pwm = -MAX_PWM;
 80013d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d4:	f513 6ffa 	cmn.w	r3, #2000	@ 0x7d0
 80013d8:	da02      	bge.n	80013e0 <ControlMotor+0x30>
 80013da:	f64f 0330 	movw	r3, #63536	@ 0xf830
 80013de:	80fb      	strh	r3, [r7, #6]
    if (right_pwm > MAX_PWM) right_pwm = MAX_PWM;
 80013e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013e4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80013e8:	dd02      	ble.n	80013f0 <ControlMotor+0x40>
 80013ea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013ee:	80bb      	strh	r3, [r7, #4]
    if (right_pwm < -MAX_PWM) right_pwm = -MAX_PWM;
 80013f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013f4:	f513 6ffa 	cmn.w	r3, #2000	@ 0x7d0
 80013f8:	da02      	bge.n	8001400 <ControlMotor+0x50>
 80013fa:	f64f 0330 	movw	r3, #63536	@ 0xf830
 80013fe:	80bb      	strh	r3, [r7, #4]

    // Điều khiển động cơ trái (Motor A: IN1, IN2, PWM CH1)
    if (left_pwm > 0) {
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	2b00      	cmp	r3, #0
 8001406:	dd0f      	ble.n	8001428 <ControlMotor+0x78>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // IN1
 8001408:	2201      	movs	r2, #1
 800140a:	2110      	movs	r1, #16
 800140c:	4835      	ldr	r0, [pc, #212]	@ (80014e4 <ControlMotor+0x134>)
 800140e:	f001 fc3b 	bl	8002c88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // IN2
 8001412:	2200      	movs	r2, #0
 8001414:	2120      	movs	r1, #32
 8001416:	4833      	ldr	r0, [pc, #204]	@ (80014e4 <ControlMotor+0x134>)
 8001418:	f001 fc36 	bl	8002c88 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, left_pwm);
 800141c:	4b32      	ldr	r3, [pc, #200]	@ (80014e8 <ControlMotor+0x138>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001424:	635a      	str	r2, [r3, #52]	@ 0x34
 8001426:	e022      	b.n	800146e <ControlMotor+0xbe>
    } else if (left_pwm < 0) {
 8001428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142c:	2b00      	cmp	r3, #0
 800142e:	da10      	bge.n	8001452 <ControlMotor+0xa2>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // IN1
 8001430:	2200      	movs	r2, #0
 8001432:	2110      	movs	r1, #16
 8001434:	482b      	ldr	r0, [pc, #172]	@ (80014e4 <ControlMotor+0x134>)
 8001436:	f001 fc27 	bl	8002c88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // IN2
 800143a:	2201      	movs	r2, #1
 800143c:	2120      	movs	r1, #32
 800143e:	4829      	ldr	r0, [pc, #164]	@ (80014e4 <ControlMotor+0x134>)
 8001440:	f001 fc22 	bl	8002c88 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, -left_pwm);
 8001444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001448:	425a      	negs	r2, r3
 800144a:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <ControlMotor+0x138>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001450:	e00d      	b.n	800146e <ControlMotor+0xbe>
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // IN1
 8001452:	2200      	movs	r2, #0
 8001454:	2110      	movs	r1, #16
 8001456:	4823      	ldr	r0, [pc, #140]	@ (80014e4 <ControlMotor+0x134>)
 8001458:	f001 fc16 	bl	8002c88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // IN2
 800145c:	2200      	movs	r2, #0
 800145e:	2120      	movs	r1, #32
 8001460:	4820      	ldr	r0, [pc, #128]	@ (80014e4 <ControlMotor+0x134>)
 8001462:	f001 fc11 	bl	8002c88 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001466:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <ControlMotor+0x138>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2200      	movs	r2, #0
 800146c:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Điều khiển động cơ phải (Motor B: IN3, IN4, PWM CH2)
    if (right_pwm > 0) {
 800146e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	dd0f      	ble.n	8001496 <ControlMotor+0xe6>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // IN3
 8001476:	2201      	movs	r2, #1
 8001478:	2140      	movs	r1, #64	@ 0x40
 800147a:	481a      	ldr	r0, [pc, #104]	@ (80014e4 <ControlMotor+0x134>)
 800147c:	f001 fc04 	bl	8002c88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // IN4
 8001480:	2200      	movs	r2, #0
 8001482:	2180      	movs	r1, #128	@ 0x80
 8001484:	4817      	ldr	r0, [pc, #92]	@ (80014e4 <ControlMotor+0x134>)
 8001486:	f001 fbff 	bl	8002c88 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, right_pwm);
 800148a:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <ControlMotor+0x138>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001492:	639a      	str	r2, [r3, #56]	@ 0x38
    } else {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // IN3
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // IN4
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
    }
}
 8001494:	e022      	b.n	80014dc <ControlMotor+0x12c>
    } else if (right_pwm < 0) {
 8001496:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	da10      	bge.n	80014c0 <ControlMotor+0x110>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // IN3
 800149e:	2200      	movs	r2, #0
 80014a0:	2140      	movs	r1, #64	@ 0x40
 80014a2:	4810      	ldr	r0, [pc, #64]	@ (80014e4 <ControlMotor+0x134>)
 80014a4:	f001 fbf0 	bl	8002c88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN4
 80014a8:	2201      	movs	r2, #1
 80014aa:	2180      	movs	r1, #128	@ 0x80
 80014ac:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <ControlMotor+0x134>)
 80014ae:	f001 fbeb 	bl	8002c88 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -right_pwm);
 80014b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014b6:	425a      	negs	r2, r3
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <ControlMotor+0x138>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80014be:	e00d      	b.n	80014dc <ControlMotor+0x12c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // IN3
 80014c0:	2200      	movs	r2, #0
 80014c2:	2140      	movs	r1, #64	@ 0x40
 80014c4:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <ControlMotor+0x134>)
 80014c6:	f001 fbdf 	bl	8002c88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // IN4
 80014ca:	2200      	movs	r2, #0
 80014cc:	2180      	movs	r1, #128	@ 0x80
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <ControlMotor+0x134>)
 80014d0:	f001 fbda 	bl	8002c88 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <ControlMotor+0x138>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2200      	movs	r2, #0
 80014da:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40010800 	.word	0x40010800
 80014e8:	20000134 	.word	0x20000134

080014ec <Kalman_GetAngle>:

float Kalman_GetAngle(Kalman_t *Kalman, float newAngle, float newRate, float dt)
{
 80014ec:	b5b0      	push	{r4, r5, r7, lr}
 80014ee:	b08c      	sub	sp, #48	@ 0x30
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
    if (isnan(newAngle) || isnan(newRate) || isinf(newAngle) || isinf(newRate)) {
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	68b8      	ldr	r0, [r7, #8]
 80014fe:	f7ff fdb7 	bl	8001070 <__aeabi_fcmpun>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d13c      	bne.n	8001582 <Kalman_GetAngle+0x96>
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fdb0 	bl	8001070 <__aeabi_fcmpun>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d135      	bne.n	8001582 <Kalman_GetAngle+0x96>
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800151c:	2301      	movs	r3, #1
 800151e:	461d      	mov	r5, r3
 8001520:	4919      	ldr	r1, [pc, #100]	@ (8001588 <Kalman_GetAngle+0x9c>)
 8001522:	4620      	mov	r0, r4
 8001524:	f7ff fda4 	bl	8001070 <__aeabi_fcmpun>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d108      	bne.n	8001540 <Kalman_GetAngle+0x54>
 800152e:	4916      	ldr	r1, [pc, #88]	@ (8001588 <Kalman_GetAngle+0x9c>)
 8001530:	4620      	mov	r0, r4
 8001532:	f7ff fd7f 	bl	8001034 <__aeabi_fcmple>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <Kalman_GetAngle+0x54>
 800153c:	2300      	movs	r3, #0
 800153e:	461d      	mov	r5, r3
 8001540:	b2eb      	uxtb	r3, r5
 8001542:	f083 0301 	eor.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d11a      	bne.n	8001582 <Kalman_GetAngle+0x96>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8001552:	2301      	movs	r3, #1
 8001554:	461d      	mov	r5, r3
 8001556:	490c      	ldr	r1, [pc, #48]	@ (8001588 <Kalman_GetAngle+0x9c>)
 8001558:	4620      	mov	r0, r4
 800155a:	f7ff fd89 	bl	8001070 <__aeabi_fcmpun>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d108      	bne.n	8001576 <Kalman_GetAngle+0x8a>
 8001564:	4908      	ldr	r1, [pc, #32]	@ (8001588 <Kalman_GetAngle+0x9c>)
 8001566:	4620      	mov	r0, r4
 8001568:	f7ff fd64 	bl	8001034 <__aeabi_fcmple>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <Kalman_GetAngle+0x8a>
 8001572:	2300      	movs	r3, #0
 8001574:	461d      	mov	r5, r3
 8001576:	b2eb      	uxtb	r3, r5
 8001578:	f083 0301 	eor.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d004      	beq.n	800158c <Kalman_GetAngle+0xa0>
        return 0.0f;
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	e103      	b.n	8001790 <Kalman_GetAngle+0x2a4>
 8001588:	7f7fffff 	.word	0x7f7fffff
    }

    float rate = newRate - Kalman->bias;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4619      	mov	r1, r3
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fa9c 	bl	8000ad0 <__aeabi_fsub>
 8001598:	4603      	mov	r3, r0
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Kalman->angle += dt * rate;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	68dc      	ldr	r4, [r3, #12]
 80015a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015a2:	6838      	ldr	r0, [r7, #0]
 80015a4:	f7ff fb9e 	bl	8000ce4 <__aeabi_fmul>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4619      	mov	r1, r3
 80015ac:	4620      	mov	r0, r4
 80015ae:	f7ff fa91 	bl	8000ad4 <__addsf3>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	60da      	str	r2, [r3, #12]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	695c      	ldr	r4, [r3, #20]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	6839      	ldr	r1, [r7, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fb8d 	bl	8000ce4 <__aeabi_fmul>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4619      	mov	r1, r3
 80015d4:	4610      	mov	r0, r2
 80015d6:	f7ff fa7b 	bl	8000ad0 <__aeabi_fsub>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4619      	mov	r1, r3
 80015e4:	4610      	mov	r0, r2
 80015e6:	f7ff fa73 	bl	8000ad0 <__aeabi_fsub>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4610      	mov	r0, r2
 80015f6:	f7ff fa6d 	bl	8000ad4 <__addsf3>
 80015fa:	4603      	mov	r3, r0
 80015fc:	6839      	ldr	r1, [r7, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fb70 	bl	8000ce4 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	4619      	mov	r1, r3
 8001608:	4620      	mov	r0, r4
 800160a:	f7ff fa63 	bl	8000ad4 <__addsf3>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	615a      	str	r2, [r3, #20]
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	699c      	ldr	r4, [r3, #24]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	6839      	ldr	r1, [r7, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fb5f 	bl	8000ce4 <__aeabi_fmul>
 8001626:	4603      	mov	r3, r0
 8001628:	4619      	mov	r1, r3
 800162a:	4620      	mov	r0, r4
 800162c:	f7ff fa50 	bl	8000ad0 <__aeabi_fsub>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	619a      	str	r2, [r3, #24]
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	69dc      	ldr	r4, [r3, #28]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	6839      	ldr	r1, [r7, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fb4e 	bl	8000ce4 <__aeabi_fmul>
 8001648:	4603      	mov	r3, r0
 800164a:	4619      	mov	r1, r3
 800164c:	4620      	mov	r0, r4
 800164e:	f7ff fa3f 	bl	8000ad0 <__aeabi_fsub>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	61da      	str	r2, [r3, #28]
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a1c      	ldr	r4, [r3, #32]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	6839      	ldr	r1, [r7, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fb3d 	bl	8000ce4 <__aeabi_fmul>
 800166a:	4603      	mov	r3, r0
 800166c:	4619      	mov	r1, r3
 800166e:	4620      	mov	r0, r4
 8001670:	f7ff fa30 	bl	8000ad4 <__addsf3>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	621a      	str	r2, [r3, #32]

    float S = Kalman->P[0][0] + Kalman->R_measure;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4619      	mov	r1, r3
 8001686:	4610      	mov	r0, r2
 8001688:	f7ff fa24 	bl	8000ad4 <__addsf3>
 800168c:	4603      	mov	r3, r0
 800168e:	62bb      	str	r3, [r7, #40]	@ 0x28
    float K[2];
    K[0] = Kalman->P[0][0] / S;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fbd8 	bl	8000e4c <__aeabi_fdiv>
 800169c:	4603      	mov	r3, r0
 800169e:	617b      	str	r3, [r7, #20]
    K[1] = Kalman->P[1][0] / S;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fbd0 	bl	8000e4c <__aeabi_fdiv>
 80016ac:	4603      	mov	r3, r0
 80016ae:	61bb      	str	r3, [r7, #24]

    float y = newAngle - Kalman->angle;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4619      	mov	r1, r3
 80016b6:	68b8      	ldr	r0, [r7, #8]
 80016b8:	f7ff fa0a 	bl	8000ad0 <__aeabi_fsub>
 80016bc:	4603      	mov	r3, r0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
    Kalman->angle += K[0] * y;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68dc      	ldr	r4, [r3, #12]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fb0b 	bl	8000ce4 <__aeabi_fmul>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4619      	mov	r1, r3
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff f9fe 	bl	8000ad4 <__addsf3>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	60da      	str	r2, [r3, #12]
    Kalman->bias += K[1] * y;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	691c      	ldr	r4, [r3, #16]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fafb 	bl	8000ce4 <__aeabi_fmul>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4619      	mov	r1, r3
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff f9ee 	bl	8000ad4 <__addsf3>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	611a      	str	r2, [r3, #16]

    float P00_temp = Kalman->P[0][0];
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	623b      	str	r3, [r7, #32]
    float P01_temp = Kalman->P[0][1];
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	61fb      	str	r3, [r7, #28]

    Kalman->P[0][0] -= K[0] * P00_temp;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	695c      	ldr	r4, [r3, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	6a39      	ldr	r1, [r7, #32]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fae5 	bl	8000ce4 <__aeabi_fmul>
 800171a:	4603      	mov	r3, r0
 800171c:	4619      	mov	r1, r3
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff f9d6 	bl	8000ad0 <__aeabi_fsub>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	615a      	str	r2, [r3, #20]
    Kalman->P[0][1] -= K[0] * P01_temp;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	699c      	ldr	r4, [r3, #24]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	69f9      	ldr	r1, [r7, #28]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fad5 	bl	8000ce4 <__aeabi_fmul>
 800173a:	4603      	mov	r3, r0
 800173c:	4619      	mov	r1, r3
 800173e:	4620      	mov	r0, r4
 8001740:	f7ff f9c6 	bl	8000ad0 <__aeabi_fsub>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	619a      	str	r2, [r3, #24]
    Kalman->P[1][0] -= K[1] * P00_temp;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	69dc      	ldr	r4, [r3, #28]
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	6a39      	ldr	r1, [r7, #32]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fac5 	bl	8000ce4 <__aeabi_fmul>
 800175a:	4603      	mov	r3, r0
 800175c:	4619      	mov	r1, r3
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff f9b6 	bl	8000ad0 <__aeabi_fsub>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	61da      	str	r2, [r3, #28]
    Kalman->P[1][1] -= K[1] * P01_temp;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a1c      	ldr	r4, [r3, #32]
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	69f9      	ldr	r1, [r7, #28]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fab5 	bl	8000ce4 <__aeabi_fmul>
 800177a:	4603      	mov	r3, r0
 800177c:	4619      	mov	r1, r3
 800177e:	4620      	mov	r0, r4
 8001780:	f7ff f9a6 	bl	8000ad0 <__aeabi_fsub>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	621a      	str	r2, [r3, #32]

    return Kalman->angle;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	68db      	ldr	r3, [r3, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3730      	adds	r7, #48	@ 0x30
 8001794:	46bd      	mov	sp, r7
 8001796:	bdb0      	pop	{r4, r5, r7, pc}

08001798 <PID_Compute>:

float PID_Compute(PID_t *pid, float input, float dt)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b089      	sub	sp, #36	@ 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
    pid->error = pid->setpoint - input;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff f990 	bl	8000ad0 <__aeabi_fsub>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	611a      	str	r2, [r3, #16]
    float p_term = pid->Kp * pid->error;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	4619      	mov	r1, r3
 80017c2:	4610      	mov	r0, r2
 80017c4:	f7ff fa8e 	bl	8000ce4 <__aeabi_fmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	61fb      	str	r3, [r7, #28]

    pid->integral += pid->error * dt;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	699c      	ldr	r4, [r3, #24]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fa84 	bl	8000ce4 <__aeabi_fmul>
 80017dc:	4603      	mov	r3, r0
 80017de:	4619      	mov	r1, r3
 80017e0:	4620      	mov	r0, r4
 80017e2:	f7ff f977 	bl	8000ad4 <__addsf3>
 80017e6:	4603      	mov	r3, r0
 80017e8:	461a      	mov	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	619a      	str	r2, [r3, #24]
    if (pid->integral > 100.0f) pid->integral = 100.0f;  // Giới hạn trên
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	4933      	ldr	r1, [pc, #204]	@ (80018c0 <PID_Compute+0x128>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fc31 	bl	800105c <__aeabi_fcmpgt>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <PID_Compute+0x6e>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4a2f      	ldr	r2, [pc, #188]	@ (80018c0 <PID_Compute+0x128>)
 8001804:	619a      	str	r2, [r3, #24]
    if (pid->integral < -100.0f) pid->integral = -100.0f; // Giới hạn dưới
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	492e      	ldr	r1, [pc, #184]	@ (80018c4 <PID_Compute+0x12c>)
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fc07 	bl	8001020 <__aeabi_fcmplt>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <PID_Compute+0x86>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4a2a      	ldr	r2, [pc, #168]	@ (80018c4 <PID_Compute+0x12c>)
 800181c:	619a      	str	r2, [r3, #24]
    float i_term = pid->Ki * pid->integral;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	4619      	mov	r1, r3
 8001828:	4610      	mov	r0, r2
 800182a:	f7ff fa5b 	bl	8000ce4 <__aeabi_fmul>
 800182e:	4603      	mov	r3, r0
 8001830:	61bb      	str	r3, [r7, #24]

    float derivative = (pid->error - pid->last_error) / dt;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f7ff f947 	bl	8000ad0 <__aeabi_fsub>
 8001842:	4603      	mov	r3, r0
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fb00 	bl	8000e4c <__aeabi_fdiv>
 800184c:	4603      	mov	r3, r0
 800184e:	617b      	str	r3, [r7, #20]
    float d_term = pid->Kd * derivative;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4619      	mov	r1, r3
 8001856:	6978      	ldr	r0, [r7, #20]
 8001858:	f7ff fa44 	bl	8000ce4 <__aeabi_fmul>
 800185c:	4603      	mov	r3, r0
 800185e:	613b      	str	r3, [r7, #16]

    pid->output = p_term + i_term + d_term;
 8001860:	69b9      	ldr	r1, [r7, #24]
 8001862:	69f8      	ldr	r0, [r7, #28]
 8001864:	f7ff f936 	bl	8000ad4 <__addsf3>
 8001868:	4603      	mov	r3, r0
 800186a:	6939      	ldr	r1, [r7, #16]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff f931 	bl	8000ad4 <__addsf3>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	61da      	str	r2, [r3, #28]

    if (pid->output > MAX_PWM) pid->output = MAX_PWM;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4912      	ldr	r1, [pc, #72]	@ (80018c8 <PID_Compute+0x130>)
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fbeb 	bl	800105c <__aeabi_fcmpgt>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <PID_Compute+0xfa>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4a0e      	ldr	r2, [pc, #56]	@ (80018c8 <PID_Compute+0x130>)
 8001890:	61da      	str	r2, [r3, #28]
    if (pid->output < -MAX_PWM) pid->output = -MAX_PWM;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	490d      	ldr	r1, [pc, #52]	@ (80018cc <PID_Compute+0x134>)
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fbc1 	bl	8001020 <__aeabi_fcmplt>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <PID_Compute+0x112>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4a09      	ldr	r2, [pc, #36]	@ (80018cc <PID_Compute+0x134>)
 80018a8:	61da      	str	r2, [r3, #28]

    pid->last_error = pid->error;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	691a      	ldr	r2, [r3, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	615a      	str	r2, [r3, #20]

    return pid->output;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	69db      	ldr	r3, [r3, #28]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	@ 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	bf00      	nop
 80018c0:	42c80000 	.word	0x42c80000
 80018c4:	c2c80000 	.word	0xc2c80000
 80018c8:	44fa0000 	.word	0x44fa0000
 80018cc:	c4fa0000 	.word	0xc4fa0000

080018d0 <ProcessBluetoothCommand>:

void ProcessBluetoothCommand(uint8_t command)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
    switch (command) {
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	3b42      	subs	r3, #66	@ 0x42
 80018de:	2b11      	cmp	r3, #17
 80018e0:	d83a      	bhi.n	8001958 <ProcessBluetoothCommand+0x88>
 80018e2:	a201      	add	r2, pc, #4	@ (adr r2, 80018e8 <ProcessBluetoothCommand+0x18>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	08001939 	.word	0x08001939
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001931 	.word	0x08001931
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001941 	.word	0x08001941
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001959 	.word	0x08001959
 8001920:	08001959 	.word	0x08001959
 8001924:	08001959 	.word	0x08001959
 8001928:	08001949 	.word	0x08001949
 800192c:	08001951 	.word	0x08001951
        case 'F': // Tiến
            bt_command = 1;
 8001930:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <ProcessBluetoothCommand+0x9c>)
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
            break;
 8001936:	e013      	b.n	8001960 <ProcessBluetoothCommand+0x90>
        case 'B': // Lùi
            bt_command = 2;
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <ProcessBluetoothCommand+0x9c>)
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
            break;
 800193e:	e00f      	b.n	8001960 <ProcessBluetoothCommand+0x90>
        case 'L': // Quay trái
            bt_command = 3;
 8001940:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <ProcessBluetoothCommand+0x9c>)
 8001942:	2203      	movs	r2, #3
 8001944:	701a      	strb	r2, [r3, #0]
            break;
 8001946:	e00b      	b.n	8001960 <ProcessBluetoothCommand+0x90>
        case 'R': // Quay phải
            bt_command = 4;
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <ProcessBluetoothCommand+0x9c>)
 800194a:	2204      	movs	r2, #4
 800194c:	701a      	strb	r2, [r3, #0]
            break;
 800194e:	e007      	b.n	8001960 <ProcessBluetoothCommand+0x90>
        case 'S': // Dừng
            bt_command = 0;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <ProcessBluetoothCommand+0x9c>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
            break;
 8001956:	e003      	b.n	8001960 <ProcessBluetoothCommand+0x90>
        default:
            bt_command = 0;
 8001958:	4b04      	ldr	r3, [pc, #16]	@ (800196c <ProcessBluetoothCommand+0x9c>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
            break;
 800195e:	bf00      	nop
    }
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	200002d9 	.word	0x200002d9

08001970 <main>:

int main(void)
{
 8001970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001972:	b08f      	sub	sp, #60	@ 0x3c
 8001974:	af00      	add	r7, sp, #0
    HAL_Init();
 8001976:	f000 fdbd 	bl	80024f4 <HAL_Init>
    SystemClock_Config();
 800197a:	f000 fa39 	bl	8001df0 <SystemClock_Config>

    MX_GPIO_Init();
 800197e:	f000 fb6d 	bl	800205c <MX_GPIO_Init>
    MX_TIM2_Init();
 8001982:	f000 fa97 	bl	8001eb4 <MX_TIM2_Init>
    MX_I2C1_Init();
 8001986:	f000 fa6b 	bl	8001e60 <MX_I2C1_Init>
    MX_TIM3_Init();
 800198a:	f000 faf5 	bl	8001f78 <MX_TIM3_Init>
    MX_USART1_UART_Init(); // Khởi tạo UART1
 800198e:	f000 fb39 	bl	8002004 <MX_USART1_UART_Init>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Khởi động PWM kênh 1
 8001992:	2100      	movs	r1, #0
 8001994:	4898      	ldr	r0, [pc, #608]	@ (8001bf8 <main+0x288>)
 8001996:	f003 f82d 	bl	80049f4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Khởi động PWM kênh 2
 800199a:	2104      	movs	r1, #4
 800199c:	4896      	ldr	r0, [pc, #600]	@ (8001bf8 <main+0x288>)
 800199e:	f003 f829 	bl	80049f4 <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim3);
 80019a2:	4896      	ldr	r0, [pc, #600]	@ (8001bfc <main+0x28c>)
 80019a4:	f002 ff7c 	bl	80048a0 <HAL_TIM_Base_Start_IT>
    HAL_UART_Receive_IT(&huart1, (uint8_t *)bluetooth_data, 1);
 80019a8:	2201      	movs	r2, #1
 80019aa:	4995      	ldr	r1, [pc, #596]	@ (8001c00 <main+0x290>)
 80019ac:	4895      	ldr	r0, [pc, #596]	@ (8001c04 <main+0x294>)
 80019ae:	f003 fed1 	bl	8005754 <HAL_UART_Receive_IT>

    float roll, pitch;
    float dt = 0.002f; // 500 Hz
 80019b2:	4b95      	ldr	r3, [pc, #596]	@ (8001c08 <main+0x298>)
 80019b4:	633b      	str	r3, [r7, #48]	@ 0x30
    const float DEAD_ZONE = -1.5f; // Vùng chết ±5 độ
 80019b6:	4b95      	ldr	r3, [pc, #596]	@ (8001c0c <main+0x29c>)
 80019b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int16_t base_pwm = 250; // Giá trị PWM cơ bản cho di chuyển
 80019ba:	23fa      	movs	r3, #250	@ 0xfa
 80019bc:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if (MPU6050_Init() == 0) {
 80019be:	f7ff fb93 	bl	80010e8 <MPU6050_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f040 81fc 	bne.w	8001dc2 <main+0x452>
        CalibrateGyro((int16_t*)Gyro, 500);
 80019ca:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80019ce:	4890      	ldr	r0, [pc, #576]	@ (8001c10 <main+0x2a0>)
 80019d0:	f7ff fc20 	bl	8001214 <CalibrateGyro>
        CalibrateAngles(&pitch_offset, &roll_offset, 500);
 80019d4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80019d8:	498e      	ldr	r1, [pc, #568]	@ (8001c14 <main+0x2a4>)
 80019da:	488f      	ldr	r0, [pc, #572]	@ (8001c18 <main+0x2a8>)
 80019dc:	f7ff fc30 	bl	8001240 <CalibrateAngles>

        while (1)
        {
            if (data_ready) {
 80019e0:	4b8e      	ldr	r3, [pc, #568]	@ (8001c1c <main+0x2ac>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0fa      	beq.n	80019e0 <main+0x70>
                float ax = Accel[0] / 16384.0f;
 80019ea:	4b8d      	ldr	r3, [pc, #564]	@ (8001c20 <main+0x2b0>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f923 	bl	8000c3c <__aeabi_i2f>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fa25 	bl	8000e4c <__aeabi_fdiv>
 8001a02:	4603      	mov	r3, r0
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
                float ay = Accel[1] / 16384.0f;
 8001a06:	4b86      	ldr	r3, [pc, #536]	@ (8001c20 <main+0x2b0>)
 8001a08:	885b      	ldrh	r3, [r3, #2]
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f915 	bl	8000c3c <__aeabi_i2f>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fa17 	bl	8000e4c <__aeabi_fdiv>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	623b      	str	r3, [r7, #32]
                float az = Accel[2] / 16384.0f;
 8001a22:	4b7f      	ldr	r3, [pc, #508]	@ (8001c20 <main+0x2b0>)
 8001a24:	889b      	ldrh	r3, [r3, #4]
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f907 	bl	8000c3c <__aeabi_i2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fa09 	bl	8000e4c <__aeabi_fdiv>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	61fb      	str	r3, [r7, #28]
                float gx = (Gyro[0] / 131.0f) - gyroX_offset;
 8001a3e:	4b74      	ldr	r3, [pc, #464]	@ (8001c10 <main+0x2a0>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff f8f9 	bl	8000c3c <__aeabi_i2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4975      	ldr	r1, [pc, #468]	@ (8001c24 <main+0x2b4>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f9fc 	bl	8000e4c <__aeabi_fdiv>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b73      	ldr	r3, [pc, #460]	@ (8001c28 <main+0x2b8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	f7ff f836 	bl	8000ad0 <__aeabi_fsub>
 8001a64:	4603      	mov	r3, r0
 8001a66:	607b      	str	r3, [r7, #4]
                float gy = (Gyro[1] / 131.0f) - gyroY_offset;
 8001a68:	4b69      	ldr	r3, [pc, #420]	@ (8001c10 <main+0x2a0>)
 8001a6a:	885b      	ldrh	r3, [r3, #2]
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff f8e4 	bl	8000c3c <__aeabi_i2f>
 8001a74:	4603      	mov	r3, r0
 8001a76:	496b      	ldr	r1, [pc, #428]	@ (8001c24 <main+0x2b4>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff f9e7 	bl	8000e4c <__aeabi_fdiv>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b6a      	ldr	r3, [pc, #424]	@ (8001c2c <main+0x2bc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4610      	mov	r0, r2
 8001a8a:	f7ff f821 	bl	8000ad0 <__aeabi_fsub>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	603b      	str	r3, [r7, #0]

                FilterGyro(&gx, &gy);
 8001a92:	463a      	mov	r2, r7
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fbe5 	bl	8001268 <FilterGyro>
                gx_filtered = LowPassFilter(gx, gx_filtered, 0.1f);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a63      	ldr	r2, [pc, #396]	@ (8001c30 <main+0x2c0>)
 8001aa2:	6811      	ldr	r1, [r2, #0]
 8001aa4:	4a63      	ldr	r2, [pc, #396]	@ (8001c34 <main+0x2c4>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fc62 	bl	8001370 <LowPassFilter>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4a60      	ldr	r2, [pc, #384]	@ (8001c30 <main+0x2c0>)
 8001ab0:	6013      	str	r3, [r2, #0]
                gy_filtered = LowPassFilter(gy, gy_filtered, 0.1f);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	4a60      	ldr	r2, [pc, #384]	@ (8001c38 <main+0x2c8>)
 8001ab6:	6811      	ldr	r1, [r2, #0]
 8001ab8:	4a5e      	ldr	r2, [pc, #376]	@ (8001c34 <main+0x2c4>)
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fc58 	bl	8001370 <LowPassFilter>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c38 <main+0x2c8>)
 8001ac4:	6013      	str	r3, [r2, #0]

                float accelRoll = (fabs(az) > 0.01f) ? atan2(ay, az) * 180 / M_PI : 0.0f;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001acc:	495b      	ldr	r1, [pc, #364]	@ (8001c3c <main+0x2cc>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fac4 	bl	800105c <__aeabi_fcmpgt>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d023      	beq.n	8001b22 <main+0x1b2>
 8001ada:	6a38      	ldr	r0, [r7, #32]
 8001adc:	f7fe fc9c 	bl	8000418 <__aeabi_f2d>
 8001ae0:	4604      	mov	r4, r0
 8001ae2:	460d      	mov	r5, r1
 8001ae4:	69f8      	ldr	r0, [r7, #28]
 8001ae6:	f7fe fc97 	bl	8000418 <__aeabi_f2d>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4620      	mov	r0, r4
 8001af0:	4629      	mov	r1, r5
 8001af2:	f004 fb99 	bl	8006228 <atan2>
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	4b51      	ldr	r3, [pc, #324]	@ (8001c40 <main+0x2d0>)
 8001afc:	f7fe fce4 	bl	80004c8 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	a337      	add	r3, pc, #220	@ (adr r3, 8001be8 <main+0x278>)
 8001b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0e:	f7fe fe05 	bl	800071c <__aeabi_ddiv>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7fe ff85 	bl	8000a28 <__aeabi_d2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	e001      	b.n	8001b26 <main+0x1b6>
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	61bb      	str	r3, [r7, #24]
                float accelPitch = (fabs(sqrt(ay*ay + az*az)) > 0.01f) ? atan2(-ax, sqrt(ay*ay + az*az)) * 180 / M_PI : 0.0f;
 8001b28:	6a39      	ldr	r1, [r7, #32]
 8001b2a:	6a38      	ldr	r0, [r7, #32]
 8001b2c:	f7ff f8da 	bl	8000ce4 <__aeabi_fmul>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461c      	mov	r4, r3
 8001b34:	69f9      	ldr	r1, [r7, #28]
 8001b36:	69f8      	ldr	r0, [r7, #28]
 8001b38:	f7ff f8d4 	bl	8000ce4 <__aeabi_fmul>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4620      	mov	r0, r4
 8001b42:	f7fe ffc7 	bl	8000ad4 <__addsf3>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fc65 	bl	8000418 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	f004 fb69 	bl	800622c <sqrt>
 8001b5a:	a325      	add	r3, pc, #148	@ (adr r3, 8001bf0 <main+0x280>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe ff42 	bl	80009e8 <__aeabi_dcmpgt>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d06c      	beq.n	8001c44 <main+0x2d4>
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fc51 	bl	8000418 <__aeabi_f2d>
 8001b76:	4604      	mov	r4, r0
 8001b78:	460d      	mov	r5, r1
 8001b7a:	6a39      	ldr	r1, [r7, #32]
 8001b7c:	6a38      	ldr	r0, [r7, #32]
 8001b7e:	f7ff f8b1 	bl	8000ce4 <__aeabi_fmul>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461e      	mov	r6, r3
 8001b86:	69f9      	ldr	r1, [r7, #28]
 8001b88:	69f8      	ldr	r0, [r7, #28]
 8001b8a:	f7ff f8ab 	bl	8000ce4 <__aeabi_fmul>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4619      	mov	r1, r3
 8001b92:	4630      	mov	r0, r6
 8001b94:	f7fe ff9e 	bl	8000ad4 <__addsf3>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fc3c 	bl	8000418 <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f004 fb40 	bl	800622c <sqrt>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	f004 fb38 	bl	8006228 <atan2>
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <main+0x2d0>)
 8001bbe:	f7fe fc83 	bl	80004c8 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	a307      	add	r3, pc, #28	@ (adr r3, 8001be8 <main+0x278>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	f7fe fda4 	bl	800071c <__aeabi_ddiv>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7fe ff24 	bl	8000a28 <__aeabi_d2f>
 8001be0:	4603      	mov	r3, r0
 8001be2:	e031      	b.n	8001c48 <main+0x2d8>
 8001be4:	f3af 8000 	nop.w
 8001be8:	54442d18 	.word	0x54442d18
 8001bec:	400921fb 	.word	0x400921fb
 8001bf0:	40000000 	.word	0x40000000
 8001bf4:	3f847ae1 	.word	0x3f847ae1
 8001bf8:	20000134 	.word	0x20000134
 8001bfc:	2000017c 	.word	0x2000017c
 8001c00:	200002d8 	.word	0x200002d8
 8001c04:	200001c4 	.word	0x200001c4
 8001c08:	3b03126f 	.word	0x3b03126f
 8001c0c:	bfc00000 	.word	0xbfc00000
 8001c10:	200002d0 	.word	0x200002d0
 8001c14:	20000218 	.word	0x20000218
 8001c18:	20000214 	.word	0x20000214
 8001c1c:	200002d6 	.word	0x200002d6
 8001c20:	200002c8 	.word	0x200002c8
 8001c24:	43030000 	.word	0x43030000
 8001c28:	2000020c 	.word	0x2000020c
 8001c2c:	20000210 	.word	0x20000210
 8001c30:	200002c0 	.word	0x200002c0
 8001c34:	3dcccccd 	.word	0x3dcccccd
 8001c38:	200002c4 	.word	0x200002c4
 8001c3c:	3c23d70a 	.word	0x3c23d70a
 8001c40:	40668000 	.word	0x40668000
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]

                roll = Kalman_GetAngle(&KalmanX, accelRoll - roll_offset, gx_filtered, dt);
 8001c4a:	4b60      	ldr	r3, [pc, #384]	@ (8001dcc <main+0x45c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	69b8      	ldr	r0, [r7, #24]
 8001c52:	f7fe ff3d 	bl	8000ad0 <__aeabi_fsub>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd0 <main+0x460>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c60:	485c      	ldr	r0, [pc, #368]	@ (8001dd4 <main+0x464>)
 8001c62:	f7ff fc43 	bl	80014ec <Kalman_GetAngle>
 8001c66:	6138      	str	r0, [r7, #16]
                pitch = Kalman_GetAngle(&KalmanY, accelPitch - pitch_offset, gy_filtered, dt);
 8001c68:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd8 <main+0x468>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7fe ff2e 	bl	8000ad0 <__aeabi_fsub>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4619      	mov	r1, r3
 8001c78:	4b58      	ldr	r3, [pc, #352]	@ (8001ddc <main+0x46c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c7e:	4858      	ldr	r0, [pc, #352]	@ (8001de0 <main+0x470>)
 8001c80:	f7ff fc34 	bl	80014ec <Kalman_GetAngle>
 8001c84:	60f8      	str	r0, [r7, #12]

                float pid_output = PID_Compute(&pid, roll, dt);
 8001c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c88:	6939      	ldr	r1, [r7, #16]
 8001c8a:	4856      	ldr	r0, [pc, #344]	@ (8001de4 <main+0x474>)
 8001c8c:	f7ff fd84 	bl	8001798 <PID_Compute>
 8001c90:	60b8      	str	r0, [r7, #8]
                int16_t left_pwm = 0, right_pwm = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001c96:	2300      	movs	r3, #0
 8001c98:	86bb      	strh	r3, [r7, #52]	@ 0x34


                switch (bt_command) {
 8001c9a:	4b53      	ldr	r3, [pc, #332]	@ (8001de8 <main+0x478>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	f200 8082 	bhi.w	8001daa <main+0x43a>
 8001ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cac <main+0x33c>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001cc1 	.word	0x08001cc1
 8001cb0:	08001d03 	.word	0x08001d03
 8001cb4:	08001d2d 	.word	0x08001d2d
 8001cb8:	08001d57 	.word	0x08001d57
 8001cbc:	08001d81 	.word	0x08001d81
                    case 0: // Dừng
                        if (roll >= -DEAD_ZONE && roll <= DEAD_ZONE) {
 8001cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6938      	ldr	r0, [r7, #16]
 8001cca:	f7ff f9bd 	bl	8001048 <__aeabi_fcmpge>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <main+0x37c>
 8001cd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001cd6:	6938      	ldr	r0, [r7, #16]
 8001cd8:	f7ff f9ac 	bl	8001034 <__aeabi_fcmple>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d004      	beq.n	8001cec <main+0x37c>
                            left_pwm = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	86fb      	strh	r3, [r7, #54]	@ 0x36
                            right_pwm = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	86bb      	strh	r3, [r7, #52]	@ 0x34
                        } else {
                            left_pwm = (int16_t)pid_output;
                            right_pwm = (int16_t)pid_output;
                        }
                        break;
 8001cea:	e05e      	b.n	8001daa <main+0x43a>
                            left_pwm = (int16_t)pid_output;
 8001cec:	68b8      	ldr	r0, [r7, #8]
 8001cee:	f7ff f9d5 	bl	800109c <__aeabi_f2iz>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	86fb      	strh	r3, [r7, #54]	@ 0x36
                            right_pwm = (int16_t)pid_output;
 8001cf6:	68b8      	ldr	r0, [r7, #8]
 8001cf8:	f7ff f9d0 	bl	800109c <__aeabi_f2iz>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	86bb      	strh	r3, [r7, #52]	@ 0x34
                        break;
 8001d00:	e053      	b.n	8001daa <main+0x43a>
                    case 1: // Tiến
                        left_pwm = base_pwm + (int16_t)pid_output;
 8001d02:	68b8      	ldr	r0, [r7, #8]
 8001d04:	f7ff f9ca 	bl	800109c <__aeabi_f2iz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d10:	4413      	add	r3, r2
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        right_pwm = base_pwm + (int16_t)pid_output;
 8001d16:	68b8      	ldr	r0, [r7, #8]
 8001d18:	f7ff f9c0 	bl	800109c <__aeabi_f2iz>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d24:	4413      	add	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	86bb      	strh	r3, [r7, #52]	@ 0x34
                        break;
 8001d2a:	e03e      	b.n	8001daa <main+0x43a>
                    case 2: // Lùi
                        left_pwm = -base_pwm + (int16_t)pid_output;
 8001d2c:	68b8      	ldr	r0, [r7, #8]
 8001d2e:	f7ff f9b5 	bl	800109c <__aeabi_f2iz>
 8001d32:	4603      	mov	r3, r0
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        right_pwm = -base_pwm + (int16_t)pid_output;
 8001d40:	68b8      	ldr	r0, [r7, #8]
 8001d42:	f7ff f9ab 	bl	800109c <__aeabi_f2iz>
 8001d46:	4603      	mov	r3, r0
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	86bb      	strh	r3, [r7, #52]	@ 0x34
                        break;
 8001d54:	e029      	b.n	8001daa <main+0x43a>
                    case 3: // Quay trái
                        left_pwm = -base_pwm + (int16_t)pid_output;
 8001d56:	68b8      	ldr	r0, [r7, #8]
 8001d58:	f7ff f9a0 	bl	800109c <__aeabi_f2iz>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        right_pwm = base_pwm + (int16_t)pid_output;
 8001d6a:	68b8      	ldr	r0, [r7, #8]
 8001d6c:	f7ff f996 	bl	800109c <__aeabi_f2iz>
 8001d70:	4603      	mov	r3, r0
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d78:	4413      	add	r3, r2
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	86bb      	strh	r3, [r7, #52]	@ 0x34
                        break;
 8001d7e:	e014      	b.n	8001daa <main+0x43a>
                    case 4: // Quay phải
                        left_pwm = base_pwm + (int16_t)pid_output;
 8001d80:	68b8      	ldr	r0, [r7, #8]
 8001d82:	f7ff f98b 	bl	800109c <__aeabi_f2iz>
 8001d86:	4603      	mov	r3, r0
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001d8e:	4413      	add	r3, r2
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	86fb      	strh	r3, [r7, #54]	@ 0x36
                        right_pwm = -base_pwm + (int16_t)pid_output;
 8001d94:	68b8      	ldr	r0, [r7, #8]
 8001d96:	f7ff f981 	bl	800109c <__aeabi_f2iz>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	86bb      	strh	r3, [r7, #52]	@ 0x34
                        break;
 8001da8:	bf00      	nop
                }

                ControlMotor(left_pwm, right_pwm);
 8001daa:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	@ 0x34
 8001dae:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fafb 	bl	80013b0 <ControlMotor>
                data_ready = 0;
 8001dba:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <main+0x47c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
            if (data_ready) {
 8001dc0:	e60e      	b.n	80019e0 <main+0x70>
            }
        }
    } else {
        while (1) {
            HAL_Delay(1000);
 8001dc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dc6:	f000 fbf7 	bl	80025b8 <HAL_Delay>
 8001dca:	e7fa      	b.n	8001dc2 <main+0x452>
 8001dcc:	20000218 	.word	0x20000218
 8001dd0:	200002c0 	.word	0x200002c0
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000214 	.word	0x20000214
 8001ddc:	200002c4 	.word	0x200002c4
 8001de0:	20000024 	.word	0x20000024
 8001de4:	20000048 	.word	0x20000048
 8001de8:	200002d9 	.word	0x200002d9
 8001dec:	200002d6 	.word	0x200002d6

08001df0 <SystemClock_Config>:
        }
    }
}

void SystemClock_Config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b090      	sub	sp, #64	@ 0x40
 8001df4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df6:	f107 0318 	add.w	r3, r7, #24
 8001dfa:	2228      	movs	r2, #40	@ 0x28
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 f9e0 	bl	80061c4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e16:	2301      	movs	r3, #1
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001e22:	2300      	movs	r3, #0
 8001e24:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e26:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001e2c:	f107 0318 	add.w	r3, r7, #24
 8001e30:	4618      	mov	r0, r3
 8001e32:	f002 f8d5 	bl	8003fe0 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e36:	230f      	movs	r3, #15
 8001e38:	607b      	str	r3, [r7, #4]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e46:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2102      	movs	r1, #2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 fb47 	bl	80044e4 <HAL_RCC_ClockConfig>
}
 8001e56:	bf00      	nop
 8001e58:	3740      	adds	r7, #64	@ 0x40
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8001e64:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <MX_I2C1_Init+0x48>)
 8001e66:	4a11      	ldr	r2, [pc, #68]	@ (8001eac <MX_I2C1_Init+0x4c>)
 8001e68:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 400000;
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea8 <MX_I2C1_Init+0x48>)
 8001e6c:	4a10      	ldr	r2, [pc, #64]	@ (8001eb0 <MX_I2C1_Init+0x50>)
 8001e6e:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <MX_I2C1_Init+0x48>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001e76:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <MX_I2C1_Init+0x48>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <MX_I2C1_Init+0x48>)
 8001e7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e82:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <MX_I2C1_Init+0x48>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <MX_I2C1_Init+0x48>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <MX_I2C1_Init+0x48>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <MX_I2C1_Init+0x48>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	621a      	str	r2, [r3, #32]
    HAL_I2C_Init(&hi2c1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <MX_I2C1_Init+0x48>)
 8001e9e:	f000 ff0b 	bl	8002cb8 <HAL_I2C_Init>
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200000e0 	.word	0x200000e0
 8001eac:	40005400 	.word	0x40005400
 8001eb0:	00061a80 	.word	0x00061a80

08001eb4 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08e      	sub	sp, #56	@ 0x38
 8001eb8:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec8:	f107 0320 	add.w	r3, r7, #32
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
 8001ee0:	615a      	str	r2, [r3, #20]
 8001ee2:	619a      	str	r2, [r3, #24]

    htim2.Instance = TIM2;
 8001ee4:	4b23      	ldr	r3, [pc, #140]	@ (8001f74 <MX_TIM2_Init+0xc0>)
 8001ee6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eea:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 8001eec:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <MX_TIM2_Init+0xc0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <MX_TIM2_Init+0xc0>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 350;
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <MX_TIM2_Init+0xc0>)
 8001efa:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8001efe:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f00:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <MX_TIM2_Init+0xc0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f06:	4b1b      	ldr	r3, [pc, #108]	@ (8001f74 <MX_TIM2_Init+0xc0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htim2);
 8001f0c:	4819      	ldr	r0, [pc, #100]	@ (8001f74 <MX_TIM2_Init+0xc0>)
 8001f0e:	f002 fc77 	bl	8004800 <HAL_TIM_Base_Init>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 8001f18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4815      	ldr	r0, [pc, #84]	@ (8001f74 <MX_TIM2_Init+0xc0>)
 8001f20:	f002 ffbc 	bl	8004e9c <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htim2);
 8001f24:	4813      	ldr	r0, [pc, #76]	@ (8001f74 <MX_TIM2_Init+0xc0>)
 8001f26:	f002 fd0d 	bl	8004944 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8001f32:	f107 0320 	add.w	r3, r7, #32
 8001f36:	4619      	mov	r1, r3
 8001f38:	480e      	ldr	r0, [pc, #56]	@ (8001f74 <MX_TIM2_Init+0xc0>)
 8001f3a:	f003 fb4b 	bl	80055d4 <HAL_TIMEx_MasterConfigSynchronization>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f3e:	2360      	movs	r3, #96	@ 0x60
 8001f40:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 50;
 8001f42:	2332      	movs	r3, #50	@ 0x32
 8001f44:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	2200      	movs	r2, #0
 8001f52:	4619      	mov	r1, r3
 8001f54:	4807      	ldr	r0, [pc, #28]	@ (8001f74 <MX_TIM2_Init+0xc0>)
 8001f56:	f002 fedf 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4804      	ldr	r0, [pc, #16]	@ (8001f74 <MX_TIM2_Init+0xc0>)
 8001f62:	f002 fed9 	bl	8004d18 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_MspPostInit(&htim2);
 8001f66:	4803      	ldr	r0, [pc, #12]	@ (8001f74 <MX_TIM2_Init+0xc0>)
 8001f68:	f000 f9d4 	bl	8002314 <HAL_TIM_MspPostInit>
}
 8001f6c:	bf00      	nop
 8001f6e:	3738      	adds	r7, #56	@ 0x38
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000134 	.word	0x20000134

08001f78 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7e:	f107 0308 	add.w	r3, r7, #8
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]

    htim3.Instance = TIM3;
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <MX_TIM3_Init+0x84>)
 8001f96:	4a1a      	ldr	r2, [pc, #104]	@ (8002000 <MX_TIM3_Init+0x88>)
 8001f98:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 4;
 8001f9a:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <MX_TIM3_Init+0x84>)
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <MX_TIM3_Init+0x84>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 15999;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <MX_TIM3_Init+0x84>)
 8001fa8:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001fac:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fae:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <MX_TIM3_Init+0x84>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <MX_TIM3_Init+0x84>)
 8001fb6:	2280      	movs	r2, #128	@ 0x80
 8001fb8:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htim3);
 8001fba:	4810      	ldr	r0, [pc, #64]	@ (8001ffc <MX_TIM3_Init+0x84>)
 8001fbc:	f002 fc20 	bl	8004800 <HAL_TIM_Base_Init>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc4:	60bb      	str	r3, [r7, #8]
    HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8001fc6:	f107 0308 	add.w	r3, r7, #8
 8001fca:	4619      	mov	r1, r3
 8001fcc:	480b      	ldr	r0, [pc, #44]	@ (8001ffc <MX_TIM3_Init+0x84>)
 8001fce:	f002 ff65 	bl	8004e9c <HAL_TIM_ConfigClockSource>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
    HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8001fda:	463b      	mov	r3, r7
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4807      	ldr	r0, [pc, #28]	@ (8001ffc <MX_TIM3_Init+0x84>)
 8001fe0:	f003 faf8 	bl	80055d4 <HAL_TIMEx_MasterConfigSynchronization>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	201d      	movs	r0, #29
 8001fea:	f000 fbe0 	bl	80027ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fee:	201d      	movs	r0, #29
 8001ff0:	f000 fbf9 	bl	80027e6 <HAL_NVIC_EnableIRQ>
}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2000017c 	.word	0x2000017c
 8002000:	40000400 	.word	0x40000400

08002004 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8002008:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <MX_USART1_UART_Init+0x50>)
 800200a:	4a13      	ldr	r2, [pc, #76]	@ (8002058 <MX_USART1_UART_Init+0x54>)
 800200c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 800200e:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_USART1_UART_Init+0x50>)
 8002010:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002014:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002016:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <MX_USART1_UART_Init+0x50>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 800201c:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <MX_USART1_UART_Init+0x50>)
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8002022:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_USART1_UART_Init+0x50>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8002028:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <MX_USART1_UART_Init+0x50>)
 800202a:	220c      	movs	r2, #12
 800202c:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_USART1_UART_Init+0x50>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002034:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <MX_USART1_UART_Init+0x50>)
 8002036:	2200      	movs	r2, #0
 8002038:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart1);
 800203a:	4806      	ldr	r0, [pc, #24]	@ (8002054 <MX_USART1_UART_Init+0x50>)
 800203c:	f003 fb3a 	bl	80056b4 <HAL_UART_Init>

    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	2025      	movs	r0, #37	@ 0x25
 8002046:	f000 fbb2 	bl	80027ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800204a:	2025      	movs	r0, #37	@ 0x25
 800204c:	f000 fbcb 	bl	80027e6 <HAL_NVIC_EnableIRQ>
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200001c4 	.word	0x200001c4
 8002058:	40013800 	.word	0x40013800

0800205c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002062:	f107 0310 	add.w	r3, r7, #16
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002070:	4b34      	ldr	r3, [pc, #208]	@ (8002144 <MX_GPIO_Init+0xe8>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	4a33      	ldr	r2, [pc, #204]	@ (8002144 <MX_GPIO_Init+0xe8>)
 8002076:	f043 0310 	orr.w	r3, r3, #16
 800207a:	6193      	str	r3, [r2, #24]
 800207c:	4b31      	ldr	r3, [pc, #196]	@ (8002144 <MX_GPIO_Init+0xe8>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002088:	4b2e      	ldr	r3, [pc, #184]	@ (8002144 <MX_GPIO_Init+0xe8>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	4a2d      	ldr	r2, [pc, #180]	@ (8002144 <MX_GPIO_Init+0xe8>)
 800208e:	f043 0320 	orr.w	r3, r3, #32
 8002092:	6193      	str	r3, [r2, #24]
 8002094:	4b2b      	ldr	r3, [pc, #172]	@ (8002144 <MX_GPIO_Init+0xe8>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a0:	4b28      	ldr	r3, [pc, #160]	@ (8002144 <MX_GPIO_Init+0xe8>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	4a27      	ldr	r2, [pc, #156]	@ (8002144 <MX_GPIO_Init+0xe8>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6193      	str	r3, [r2, #24]
 80020ac:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <MX_GPIO_Init+0xe8>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b8:	4b22      	ldr	r3, [pc, #136]	@ (8002144 <MX_GPIO_Init+0xe8>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a21      	ldr	r2, [pc, #132]	@ (8002144 <MX_GPIO_Init+0xe8>)
 80020be:	f043 0308 	orr.w	r3, r3, #8
 80020c2:	6193      	str	r3, [r2, #24]
 80020c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002144 <MX_GPIO_Init+0xe8>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020d0:	2200      	movs	r2, #0
 80020d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020d6:	481c      	ldr	r0, [pc, #112]	@ (8002148 <MX_GPIO_Init+0xec>)
 80020d8:	f000 fdd6 	bl	8002c88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80020dc:	2200      	movs	r2, #0
 80020de:	21f0      	movs	r1, #240	@ 0xf0
 80020e0:	481a      	ldr	r0, [pc, #104]	@ (800214c <MX_GPIO_Init+0xf0>)
 80020e2:	f000 fdd1 	bl	8002c88 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ec:	2301      	movs	r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2302      	movs	r3, #2
 80020f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f8:	f107 0310 	add.w	r3, r7, #16
 80020fc:	4619      	mov	r1, r3
 80020fe:	4812      	ldr	r0, [pc, #72]	@ (8002148 <MX_GPIO_Init+0xec>)
 8002100:	f000 fc3e 	bl	8002980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002104:	23f0      	movs	r3, #240	@ 0xf0
 8002106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002108:	2301      	movs	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	4619      	mov	r1, r3
 800211a:	480c      	ldr	r0, [pc, #48]	@ (800214c <MX_GPIO_Init+0xf0>)
 800211c:	f000 fc30 	bl	8002980 <HAL_GPIO_Init>

    // Cấu hình chân UART1 (PA9: TX, PA10: RX)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002120:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002124:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800212a:	2303      	movs	r3, #3
 800212c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 0310 	add.w	r3, r7, #16
 8002132:	4619      	mov	r1, r3
 8002134:	4805      	ldr	r0, [pc, #20]	@ (800214c <MX_GPIO_Init+0xf0>)
 8002136:	f000 fc23 	bl	8002980 <HAL_GPIO_Init>
}
 800213a:	bf00      	nop
 800213c:	3720      	adds	r7, #32
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	40011000 	.word	0x40011000
 800214c:	40010800 	.word	0x40010800

08002150 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a06      	ldr	r2, [pc, #24]	@ (8002178 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d106      	bne.n	8002170 <HAL_TIM_PeriodElapsedCallback+0x20>
        MPU6050_Read_Accel_Gyro((int16_t*)Accel, (int16_t*)Gyro);
 8002162:	4906      	ldr	r1, [pc, #24]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002164:	4806      	ldr	r0, [pc, #24]	@ (8002180 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002166:	f7fe fff9 	bl	800115c <MPU6050_Read_Accel_Gyro>
        data_ready = 1;
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800216c:	2201      	movs	r2, #1
 800216e:	701a      	strb	r2, [r3, #0]
    }
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40000400 	.word	0x40000400
 800217c:	200002d0 	.word	0x200002d0
 8002180:	200002c8 	.word	0x200002c8
 8002184:	200002d6 	.word	0x200002d6

08002188 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a08      	ldr	r2, [pc, #32]	@ (80021b8 <HAL_UART_RxCpltCallback+0x30>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d10a      	bne.n	80021b0 <HAL_UART_RxCpltCallback+0x28>
        ProcessBluetoothCommand(bluetooth_data[0]);
 800219a:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <HAL_UART_RxCpltCallback+0x34>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fb95 	bl	80018d0 <ProcessBluetoothCommand>
        HAL_UART_Receive_IT(&huart1, (uint8_t *)bluetooth_data, 1);
 80021a6:	2201      	movs	r2, #1
 80021a8:	4904      	ldr	r1, [pc, #16]	@ (80021bc <HAL_UART_RxCpltCallback+0x34>)
 80021aa:	4805      	ldr	r0, [pc, #20]	@ (80021c0 <HAL_UART_RxCpltCallback+0x38>)
 80021ac:	f003 fad2 	bl	8005754 <HAL_UART_Receive_IT>
    }
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40013800 	.word	0x40013800
 80021bc:	200002d8 	.word	0x200002d8
 80021c0:	200001c4 	.word	0x200001c4

080021c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_MspInit+0x5c>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	4a14      	ldr	r2, [pc, #80]	@ (8002220 <HAL_MspInit+0x5c>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6193      	str	r3, [r2, #24]
 80021d6:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <HAL_MspInit+0x5c>)
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <HAL_MspInit+0x5c>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002220 <HAL_MspInit+0x5c>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ec:	61d3      	str	r3, [r2, #28]
 80021ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <HAL_MspInit+0x5c>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80021fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <HAL_MspInit+0x60>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	4a04      	ldr	r2, [pc, #16]	@ (8002224 <HAL_MspInit+0x60>)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	40021000 	.word	0x40021000
 8002224:	40010000 	.word	0x40010000

08002228 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a15      	ldr	r2, [pc, #84]	@ (8002298 <HAL_I2C_MspInit+0x70>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d123      	bne.n	8002290 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002248:	4b14      	ldr	r3, [pc, #80]	@ (800229c <HAL_I2C_MspInit+0x74>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a13      	ldr	r2, [pc, #76]	@ (800229c <HAL_I2C_MspInit+0x74>)
 800224e:	f043 0308 	orr.w	r3, r3, #8
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b11      	ldr	r3, [pc, #68]	@ (800229c <HAL_I2C_MspInit+0x74>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002260:	23c0      	movs	r3, #192	@ 0xc0
 8002262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002264:	2312      	movs	r3, #18
 8002266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226c:	f107 0310 	add.w	r3, r7, #16
 8002270:	4619      	mov	r1, r3
 8002272:	480b      	ldr	r0, [pc, #44]	@ (80022a0 <HAL_I2C_MspInit+0x78>)
 8002274:	f000 fb84 	bl	8002980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <HAL_I2C_MspInit+0x74>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	4a07      	ldr	r2, [pc, #28]	@ (800229c <HAL_I2C_MspInit+0x74>)
 800227e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002282:	61d3      	str	r3, [r2, #28]
 8002284:	4b05      	ldr	r3, [pc, #20]	@ (800229c <HAL_I2C_MspInit+0x74>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002290:	bf00      	nop
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40005400 	.word	0x40005400
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010c00 	.word	0x40010c00

080022a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b4:	d10c      	bne.n	80022d0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022b6:	4b15      	ldr	r3, [pc, #84]	@ (800230c <HAL_TIM_Base_MspInit+0x68>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	4a14      	ldr	r2, [pc, #80]	@ (800230c <HAL_TIM_Base_MspInit+0x68>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	61d3      	str	r3, [r2, #28]
 80022c2:	4b12      	ldr	r3, [pc, #72]	@ (800230c <HAL_TIM_Base_MspInit+0x68>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022ce:	e018      	b.n	8002302 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002310 <HAL_TIM_Base_MspInit+0x6c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d113      	bne.n	8002302 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022da:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <HAL_TIM_Base_MspInit+0x68>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4a0b      	ldr	r2, [pc, #44]	@ (800230c <HAL_TIM_Base_MspInit+0x68>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	61d3      	str	r3, [r2, #28]
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_TIM_Base_MspInit+0x68>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	201d      	movs	r0, #29
 80022f8:	f000 fa59 	bl	80027ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022fc:	201d      	movs	r0, #29
 80022fe:	f000 fa72 	bl	80027e6 <HAL_NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	40000400 	.word	0x40000400

08002314 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002332:	d117      	bne.n	8002364 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002334:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <HAL_TIM_MspPostInit+0x58>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	4a0c      	ldr	r2, [pc, #48]	@ (800236c <HAL_TIM_MspPostInit+0x58>)
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	6193      	str	r3, [r2, #24]
 8002340:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <HAL_TIM_MspPostInit+0x58>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800234c:	2303      	movs	r3, #3
 800234e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2302      	movs	r3, #2
 8002356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	4619      	mov	r1, r3
 800235e:	4804      	ldr	r0, [pc, #16]	@ (8002370 <HAL_TIM_MspPostInit+0x5c>)
 8002360:	f000 fb0e 	bl	8002980 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002364:	bf00      	nop
 8002366:	3720      	adds	r7, #32
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	40010800 	.word	0x40010800

08002374 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a20      	ldr	r2, [pc, #128]	@ (8002410 <HAL_UART_MspInit+0x9c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d139      	bne.n	8002408 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002394:	4b1f      	ldr	r3, [pc, #124]	@ (8002414 <HAL_UART_MspInit+0xa0>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a1e      	ldr	r2, [pc, #120]	@ (8002414 <HAL_UART_MspInit+0xa0>)
 800239a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239e:	6193      	str	r3, [r2, #24]
 80023a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <HAL_UART_MspInit+0xa0>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ac:	4b19      	ldr	r3, [pc, #100]	@ (8002414 <HAL_UART_MspInit+0xa0>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a18      	ldr	r2, [pc, #96]	@ (8002414 <HAL_UART_MspInit+0xa0>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <HAL_UART_MspInit+0xa0>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ce:	2303      	movs	r3, #3
 80023d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d2:	f107 0310 	add.w	r3, r7, #16
 80023d6:	4619      	mov	r1, r3
 80023d8:	480f      	ldr	r0, [pc, #60]	@ (8002418 <HAL_UART_MspInit+0xa4>)
 80023da:	f000 fad1 	bl	8002980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ec:	f107 0310 	add.w	r3, r7, #16
 80023f0:	4619      	mov	r1, r3
 80023f2:	4809      	ldr	r0, [pc, #36]	@ (8002418 <HAL_UART_MspInit+0xa4>)
 80023f4:	f000 fac4 	bl	8002980 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023f8:	2200      	movs	r2, #0
 80023fa:	2100      	movs	r1, #0
 80023fc:	2025      	movs	r0, #37	@ 0x25
 80023fe:	f000 f9d6 	bl	80027ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002402:	2025      	movs	r0, #37	@ 0x25
 8002404:	f000 f9ef 	bl	80027e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002408:	bf00      	nop
 800240a:	3720      	adds	r7, #32
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40013800 	.word	0x40013800
 8002414:	40021000 	.word	0x40021000
 8002418:	40010800 	.word	0x40010800

0800241c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <NMI_Handler+0x4>

08002424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <HardFault_Handler+0x4>

0800242c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <MemManage_Handler+0x4>

08002434 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <BusFault_Handler+0x4>

0800243c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <UsageFault_Handler+0x4>

08002444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246c:	f000 f888 	bl	8002580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}

08002474 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002478:	4802      	ldr	r0, [pc, #8]	@ (8002484 <TIM3_IRQHandler+0x10>)
 800247a:	f002 fb5d 	bl	8004b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000017c 	.word	0x2000017c

08002488 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800248c:	4802      	ldr	r0, [pc, #8]	@ (8002498 <USART1_IRQHandler+0x10>)
 800248e:	f003 f987 	bl	80057a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200001c4 	.word	0x200001c4

0800249c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a8:	f7ff fff8 	bl	800249c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024ac:	480b      	ldr	r0, [pc, #44]	@ (80024dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024ae:	490c      	ldr	r1, [pc, #48]	@ (80024e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024b0:	4a0c      	ldr	r2, [pc, #48]	@ (80024e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b4:	e002      	b.n	80024bc <LoopCopyDataInit>

080024b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ba:	3304      	adds	r3, #4

080024bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c0:	d3f9      	bcc.n	80024b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c2:	4a09      	ldr	r2, [pc, #36]	@ (80024e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024c4:	4c09      	ldr	r4, [pc, #36]	@ (80024ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c8:	e001      	b.n	80024ce <LoopFillZerobss>

080024ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024cc:	3204      	adds	r2, #4

080024ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d0:	d3fb      	bcc.n	80024ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024d2:	f003 fe85 	bl	80061e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024d6:	f7ff fa4b 	bl	8001970 <main>
  bx lr
 80024da:	4770      	bx	lr
  ldr r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e0:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80024e4:	080069b8 	.word	0x080069b8
  ldr r2, =_sbss
 80024e8:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80024ec:	20000418 	.word	0x20000418

080024f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC1_2_IRQHandler>
	...

080024f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f8:	4b08      	ldr	r3, [pc, #32]	@ (800251c <HAL_Init+0x28>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a07      	ldr	r2, [pc, #28]	@ (800251c <HAL_Init+0x28>)
 80024fe:	f043 0310 	orr.w	r3, r3, #16
 8002502:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002504:	2003      	movs	r0, #3
 8002506:	f000 f947 	bl	8002798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800250a:	200f      	movs	r0, #15
 800250c:	f000 f808 	bl	8002520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002510:	f7ff fe58 	bl	80021c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000

08002520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002528:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <HAL_InitTick+0x54>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b12      	ldr	r3, [pc, #72]	@ (8002578 <HAL_InitTick+0x58>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002536:	fbb3 f3f1 	udiv	r3, r3, r1
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f95f 	bl	8002802 <HAL_SYSTICK_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00e      	b.n	800256c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d80a      	bhi.n	800256a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002554:	2200      	movs	r2, #0
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f000 f927 	bl	80027ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002560:	4a06      	ldr	r2, [pc, #24]	@ (800257c <HAL_InitTick+0x5c>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000068 	.word	0x20000068
 8002578:	20000070 	.word	0x20000070
 800257c:	2000006c 	.word	0x2000006c

08002580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002584:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_IncTick+0x1c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <HAL_IncTick+0x20>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a03      	ldr	r2, [pc, #12]	@ (80025a0 <HAL_IncTick+0x20>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	20000070 	.word	0x20000070
 80025a0:	200002dc 	.word	0x200002dc

080025a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return uwTick;
 80025a8:	4b02      	ldr	r3, [pc, #8]	@ (80025b4 <HAL_GetTick+0x10>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	200002dc 	.word	0x200002dc

080025b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff fff0 	bl	80025a4 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d005      	beq.n	80025de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025d2:	4b0a      	ldr	r3, [pc, #40]	@ (80025fc <HAL_Delay+0x44>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025de:	bf00      	nop
 80025e0:	f7ff ffe0 	bl	80025a4 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d8f7      	bhi.n	80025e0 <HAL_Delay+0x28>
  {
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000070 	.word	0x20000070

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002628:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800262c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db0b      	blt.n	800268e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4906      	ldr	r1, [pc, #24]	@ (8002698 <__NVIC_EnableIRQ+0x34>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	e000e100 	.word	0xe000e100

0800269c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	db0a      	blt.n	80026c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	490c      	ldr	r1, [pc, #48]	@ (80026e8 <__NVIC_SetPriority+0x4c>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	0112      	lsls	r2, r2, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	440b      	add	r3, r1
 80026c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c4:	e00a      	b.n	80026dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4908      	ldr	r1, [pc, #32]	@ (80026ec <__NVIC_SetPriority+0x50>)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3b04      	subs	r3, #4
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	440b      	add	r3, r1
 80026da:	761a      	strb	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	@ 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f1c3 0307 	rsb	r3, r3, #7
 800270a:	2b04      	cmp	r3, #4
 800270c:	bf28      	it	cs
 800270e:	2304      	movcs	r3, #4
 8002710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3304      	adds	r3, #4
 8002716:	2b06      	cmp	r3, #6
 8002718:	d902      	bls.n	8002720 <NVIC_EncodePriority+0x30>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3b03      	subs	r3, #3
 800271e:	e000      	b.n	8002722 <NVIC_EncodePriority+0x32>
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	f04f 32ff 	mov.w	r2, #4294967295
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43d9      	mvns	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	4313      	orrs	r3, r2
         );
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	@ 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002764:	d301      	bcc.n	800276a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002766:	2301      	movs	r3, #1
 8002768:	e00f      	b.n	800278a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276a:	4a0a      	ldr	r2, [pc, #40]	@ (8002794 <SysTick_Config+0x40>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002772:	210f      	movs	r1, #15
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	f7ff ff90 	bl	800269c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800277c:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <SysTick_Config+0x40>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002782:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <SysTick_Config+0x40>)
 8002784:	2207      	movs	r2, #7
 8002786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	e000e010 	.word	0xe000e010

08002798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ff2d 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4603      	mov	r3, r0
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c0:	f7ff ff42 	bl	8002648 <__NVIC_GetPriorityGrouping>
 80027c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	6978      	ldr	r0, [r7, #20]
 80027cc:	f7ff ff90 	bl	80026f0 <NVIC_EncodePriority>
 80027d0:	4602      	mov	r2, r0
 80027d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff5f 	bl	800269c <__NVIC_SetPriority>
}
 80027de:	bf00      	nop
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff35 	bl	8002664 <__NVIC_EnableIRQ>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ffa2 	bl	8002754 <SysTick_Config>
 8002810:	4603      	mov	r3, r0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d008      	beq.n	8002844 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2204      	movs	r2, #4
 8002836:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e020      	b.n	8002886 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 020e 	bic.w	r2, r2, #14
 8002852:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286c:	2101      	movs	r1, #1
 800286e:	fa01 f202 	lsl.w	r2, r1, r2
 8002872:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d005      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2204      	movs	r2, #4
 80028ac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
 80028b2:	e051      	b.n	8002958 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 020e 	bic.w	r2, r2, #14
 80028c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a22      	ldr	r2, [pc, #136]	@ (8002964 <HAL_DMA_Abort_IT+0xd4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d029      	beq.n	8002932 <HAL_DMA_Abort_IT+0xa2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a21      	ldr	r2, [pc, #132]	@ (8002968 <HAL_DMA_Abort_IT+0xd8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_DMA_Abort_IT+0x9e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1f      	ldr	r2, [pc, #124]	@ (800296c <HAL_DMA_Abort_IT+0xdc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01a      	beq.n	8002928 <HAL_DMA_Abort_IT+0x98>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002970 <HAL_DMA_Abort_IT+0xe0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d012      	beq.n	8002922 <HAL_DMA_Abort_IT+0x92>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1c      	ldr	r2, [pc, #112]	@ (8002974 <HAL_DMA_Abort_IT+0xe4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00a      	beq.n	800291c <HAL_DMA_Abort_IT+0x8c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1b      	ldr	r2, [pc, #108]	@ (8002978 <HAL_DMA_Abort_IT+0xe8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d102      	bne.n	8002916 <HAL_DMA_Abort_IT+0x86>
 8002910:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002914:	e00e      	b.n	8002934 <HAL_DMA_Abort_IT+0xa4>
 8002916:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800291a:	e00b      	b.n	8002934 <HAL_DMA_Abort_IT+0xa4>
 800291c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002920:	e008      	b.n	8002934 <HAL_DMA_Abort_IT+0xa4>
 8002922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002926:	e005      	b.n	8002934 <HAL_DMA_Abort_IT+0xa4>
 8002928:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800292c:	e002      	b.n	8002934 <HAL_DMA_Abort_IT+0xa4>
 800292e:	2310      	movs	r3, #16
 8002930:	e000      	b.n	8002934 <HAL_DMA_Abort_IT+0xa4>
 8002932:	2301      	movs	r3, #1
 8002934:	4a11      	ldr	r2, [pc, #68]	@ (800297c <HAL_DMA_Abort_IT+0xec>)
 8002936:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	4798      	blx	r3
    } 
  }
  return status;
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40020008 	.word	0x40020008
 8002968:	4002001c 	.word	0x4002001c
 800296c:	40020030 	.word	0x40020030
 8002970:	40020044 	.word	0x40020044
 8002974:	40020058 	.word	0x40020058
 8002978:	4002006c 	.word	0x4002006c
 800297c:	40020000 	.word	0x40020000

08002980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002980:	b480      	push	{r7}
 8002982:	b08b      	sub	sp, #44	@ 0x2c
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002992:	e169      	b.n	8002c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002994:	2201      	movs	r2, #1
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	f040 8158 	bne.w	8002c62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4a9a      	ldr	r2, [pc, #616]	@ (8002c20 <HAL_GPIO_Init+0x2a0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d05e      	beq.n	8002a7a <HAL_GPIO_Init+0xfa>
 80029bc:	4a98      	ldr	r2, [pc, #608]	@ (8002c20 <HAL_GPIO_Init+0x2a0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d875      	bhi.n	8002aae <HAL_GPIO_Init+0x12e>
 80029c2:	4a98      	ldr	r2, [pc, #608]	@ (8002c24 <HAL_GPIO_Init+0x2a4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d058      	beq.n	8002a7a <HAL_GPIO_Init+0xfa>
 80029c8:	4a96      	ldr	r2, [pc, #600]	@ (8002c24 <HAL_GPIO_Init+0x2a4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d86f      	bhi.n	8002aae <HAL_GPIO_Init+0x12e>
 80029ce:	4a96      	ldr	r2, [pc, #600]	@ (8002c28 <HAL_GPIO_Init+0x2a8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d052      	beq.n	8002a7a <HAL_GPIO_Init+0xfa>
 80029d4:	4a94      	ldr	r2, [pc, #592]	@ (8002c28 <HAL_GPIO_Init+0x2a8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d869      	bhi.n	8002aae <HAL_GPIO_Init+0x12e>
 80029da:	4a94      	ldr	r2, [pc, #592]	@ (8002c2c <HAL_GPIO_Init+0x2ac>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d04c      	beq.n	8002a7a <HAL_GPIO_Init+0xfa>
 80029e0:	4a92      	ldr	r2, [pc, #584]	@ (8002c2c <HAL_GPIO_Init+0x2ac>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d863      	bhi.n	8002aae <HAL_GPIO_Init+0x12e>
 80029e6:	4a92      	ldr	r2, [pc, #584]	@ (8002c30 <HAL_GPIO_Init+0x2b0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d046      	beq.n	8002a7a <HAL_GPIO_Init+0xfa>
 80029ec:	4a90      	ldr	r2, [pc, #576]	@ (8002c30 <HAL_GPIO_Init+0x2b0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d85d      	bhi.n	8002aae <HAL_GPIO_Init+0x12e>
 80029f2:	2b12      	cmp	r3, #18
 80029f4:	d82a      	bhi.n	8002a4c <HAL_GPIO_Init+0xcc>
 80029f6:	2b12      	cmp	r3, #18
 80029f8:	d859      	bhi.n	8002aae <HAL_GPIO_Init+0x12e>
 80029fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002a00 <HAL_GPIO_Init+0x80>)
 80029fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a00:	08002a7b 	.word	0x08002a7b
 8002a04:	08002a55 	.word	0x08002a55
 8002a08:	08002a67 	.word	0x08002a67
 8002a0c:	08002aa9 	.word	0x08002aa9
 8002a10:	08002aaf 	.word	0x08002aaf
 8002a14:	08002aaf 	.word	0x08002aaf
 8002a18:	08002aaf 	.word	0x08002aaf
 8002a1c:	08002aaf 	.word	0x08002aaf
 8002a20:	08002aaf 	.word	0x08002aaf
 8002a24:	08002aaf 	.word	0x08002aaf
 8002a28:	08002aaf 	.word	0x08002aaf
 8002a2c:	08002aaf 	.word	0x08002aaf
 8002a30:	08002aaf 	.word	0x08002aaf
 8002a34:	08002aaf 	.word	0x08002aaf
 8002a38:	08002aaf 	.word	0x08002aaf
 8002a3c:	08002aaf 	.word	0x08002aaf
 8002a40:	08002aaf 	.word	0x08002aaf
 8002a44:	08002a5d 	.word	0x08002a5d
 8002a48:	08002a71 	.word	0x08002a71
 8002a4c:	4a79      	ldr	r2, [pc, #484]	@ (8002c34 <HAL_GPIO_Init+0x2b4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a52:	e02c      	b.n	8002aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	623b      	str	r3, [r7, #32]
          break;
 8002a5a:	e029      	b.n	8002ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	3304      	adds	r3, #4
 8002a62:	623b      	str	r3, [r7, #32]
          break;
 8002a64:	e024      	b.n	8002ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	623b      	str	r3, [r7, #32]
          break;
 8002a6e:	e01f      	b.n	8002ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	330c      	adds	r3, #12
 8002a76:	623b      	str	r3, [r7, #32]
          break;
 8002a78:	e01a      	b.n	8002ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a82:	2304      	movs	r3, #4
 8002a84:	623b      	str	r3, [r7, #32]
          break;
 8002a86:	e013      	b.n	8002ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d105      	bne.n	8002a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a90:	2308      	movs	r3, #8
 8002a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	611a      	str	r2, [r3, #16]
          break;
 8002a9a:	e009      	b.n	8002ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	615a      	str	r2, [r3, #20]
          break;
 8002aa6:	e003      	b.n	8002ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	623b      	str	r3, [r7, #32]
          break;
 8002aac:	e000      	b.n	8002ab0 <HAL_GPIO_Init+0x130>
          break;
 8002aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2bff      	cmp	r3, #255	@ 0xff
 8002ab4:	d801      	bhi.n	8002aba <HAL_GPIO_Init+0x13a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	e001      	b.n	8002abe <HAL_GPIO_Init+0x13e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2bff      	cmp	r3, #255	@ 0xff
 8002ac4:	d802      	bhi.n	8002acc <HAL_GPIO_Init+0x14c>
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	e002      	b.n	8002ad2 <HAL_GPIO_Init+0x152>
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	3b08      	subs	r3, #8
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	210f      	movs	r1, #15
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	6a39      	ldr	r1, [r7, #32]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	431a      	orrs	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80b1 	beq.w	8002c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b00:	4b4d      	ldr	r3, [pc, #308]	@ (8002c38 <HAL_GPIO_Init+0x2b8>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	4a4c      	ldr	r2, [pc, #304]	@ (8002c38 <HAL_GPIO_Init+0x2b8>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6193      	str	r3, [r2, #24]
 8002b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c38 <HAL_GPIO_Init+0x2b8>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b18:	4a48      	ldr	r2, [pc, #288]	@ (8002c3c <HAL_GPIO_Init+0x2bc>)
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	089b      	lsrs	r3, r3, #2
 8002b1e:	3302      	adds	r3, #2
 8002b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	220f      	movs	r2, #15
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a40      	ldr	r2, [pc, #256]	@ (8002c40 <HAL_GPIO_Init+0x2c0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d013      	beq.n	8002b6c <HAL_GPIO_Init+0x1ec>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a3f      	ldr	r2, [pc, #252]	@ (8002c44 <HAL_GPIO_Init+0x2c4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00d      	beq.n	8002b68 <HAL_GPIO_Init+0x1e8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a3e      	ldr	r2, [pc, #248]	@ (8002c48 <HAL_GPIO_Init+0x2c8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <HAL_GPIO_Init+0x1e4>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a3d      	ldr	r2, [pc, #244]	@ (8002c4c <HAL_GPIO_Init+0x2cc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d101      	bne.n	8002b60 <HAL_GPIO_Init+0x1e0>
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e006      	b.n	8002b6e <HAL_GPIO_Init+0x1ee>
 8002b60:	2304      	movs	r3, #4
 8002b62:	e004      	b.n	8002b6e <HAL_GPIO_Init+0x1ee>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e002      	b.n	8002b6e <HAL_GPIO_Init+0x1ee>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <HAL_GPIO_Init+0x1ee>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b70:	f002 0203 	and.w	r2, r2, #3
 8002b74:	0092      	lsls	r2, r2, #2
 8002b76:	4093      	lsls	r3, r2
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b7e:	492f      	ldr	r1, [pc, #188]	@ (8002c3c <HAL_GPIO_Init+0x2bc>)
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	3302      	adds	r3, #2
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d006      	beq.n	8002ba6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b98:	4b2d      	ldr	r3, [pc, #180]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	492c      	ldr	r1, [pc, #176]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]
 8002ba4:	e006      	b.n	8002bb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	4928      	ldr	r1, [pc, #160]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d006      	beq.n	8002bce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bc0:	4b23      	ldr	r3, [pc, #140]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	4922      	ldr	r1, [pc, #136]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60cb      	str	r3, [r1, #12]
 8002bcc:	e006      	b.n	8002bdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bce:	4b20      	ldr	r3, [pc, #128]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	491e      	ldr	r1, [pc, #120]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d006      	beq.n	8002bf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002be8:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4918      	ldr	r1, [pc, #96]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
 8002bf4:	e006      	b.n	8002c04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bf6:	4b16      	ldr	r3, [pc, #88]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	4914      	ldr	r1, [pc, #80]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d021      	beq.n	8002c54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c10:	4b0f      	ldr	r3, [pc, #60]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	490e      	ldr	r1, [pc, #56]	@ (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]
 8002c1c:	e021      	b.n	8002c62 <HAL_GPIO_Init+0x2e2>
 8002c1e:	bf00      	nop
 8002c20:	10320000 	.word	0x10320000
 8002c24:	10310000 	.word	0x10310000
 8002c28:	10220000 	.word	0x10220000
 8002c2c:	10210000 	.word	0x10210000
 8002c30:	10120000 	.word	0x10120000
 8002c34:	10110000 	.word	0x10110000
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	40010800 	.word	0x40010800
 8002c44:	40010c00 	.word	0x40010c00
 8002c48:	40011000 	.word	0x40011000
 8002c4c:	40011400 	.word	0x40011400
 8002c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_GPIO_Init+0x304>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	4909      	ldr	r1, [pc, #36]	@ (8002c84 <HAL_GPIO_Init+0x304>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	3301      	adds	r3, #1
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f47f ae8e 	bne.w	8002994 <HAL_GPIO_Init+0x14>
  }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	372c      	adds	r7, #44	@ 0x2c
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	40010400 	.word	0x40010400

08002c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	807b      	strh	r3, [r7, #2]
 8002c94:	4613      	mov	r3, r2
 8002c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c98:	787b      	ldrb	r3, [r7, #1]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c9e:	887a      	ldrh	r2, [r7, #2]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ca4:	e003      	b.n	8002cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ca6:	887b      	ldrh	r3, [r7, #2]
 8002ca8:	041a      	lsls	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	611a      	str	r2, [r3, #16]
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e12b      	b.n	8002f22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff faa2 	bl	8002228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2224      	movs	r2, #36	@ 0x24
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0201 	bic.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d1c:	f001 fd2a 	bl	8004774 <HAL_RCC_GetPCLK1Freq>
 8002d20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4a81      	ldr	r2, [pc, #516]	@ (8002f2c <HAL_I2C_Init+0x274>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d807      	bhi.n	8002d3c <HAL_I2C_Init+0x84>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a80      	ldr	r2, [pc, #512]	@ (8002f30 <HAL_I2C_Init+0x278>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	bf94      	ite	ls
 8002d34:	2301      	movls	r3, #1
 8002d36:	2300      	movhi	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e006      	b.n	8002d4a <HAL_I2C_Init+0x92>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a7d      	ldr	r2, [pc, #500]	@ (8002f34 <HAL_I2C_Init+0x27c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bf94      	ite	ls
 8002d44:	2301      	movls	r3, #1
 8002d46:	2300      	movhi	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0e7      	b.n	8002f22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a78      	ldr	r2, [pc, #480]	@ (8002f38 <HAL_I2C_Init+0x280>)
 8002d56:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5a:	0c9b      	lsrs	r3, r3, #18
 8002d5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a6a      	ldr	r2, [pc, #424]	@ (8002f2c <HAL_I2C_Init+0x274>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d802      	bhi.n	8002d8c <HAL_I2C_Init+0xd4>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	e009      	b.n	8002da0 <HAL_I2C_Init+0xe8>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	4a69      	ldr	r2, [pc, #420]	@ (8002f3c <HAL_I2C_Init+0x284>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	3301      	adds	r3, #1
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002db2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	495c      	ldr	r1, [pc, #368]	@ (8002f2c <HAL_I2C_Init+0x274>)
 8002dbc:	428b      	cmp	r3, r1
 8002dbe:	d819      	bhi.n	8002df4 <HAL_I2C_Init+0x13c>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1e59      	subs	r1, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dce:	1c59      	adds	r1, r3, #1
 8002dd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002dd4:	400b      	ands	r3, r1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_I2C_Init+0x138>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1e59      	subs	r1, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	e051      	b.n	8002e94 <HAL_I2C_Init+0x1dc>
 8002df0:	2304      	movs	r3, #4
 8002df2:	e04f      	b.n	8002e94 <HAL_I2C_Init+0x1dc>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d111      	bne.n	8002e20 <HAL_I2C_Init+0x168>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1e58      	subs	r0, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	440b      	add	r3, r1
 8002e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e012      	b.n	8002e46 <HAL_I2C_Init+0x18e>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1e58      	subs	r0, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	0099      	lsls	r1, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e36:	3301      	adds	r3, #1
 8002e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Init+0x196>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e022      	b.n	8002e94 <HAL_I2C_Init+0x1dc>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10e      	bne.n	8002e74 <HAL_I2C_Init+0x1bc>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1e58      	subs	r0, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6859      	ldr	r1, [r3, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	440b      	add	r3, r1
 8002e64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e72:	e00f      	b.n	8002e94 <HAL_I2C_Init+0x1dc>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1e58      	subs	r0, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	0099      	lsls	r1, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	6809      	ldr	r1, [r1, #0]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ec2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6911      	ldr	r1, [r2, #16]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68d2      	ldr	r2, [r2, #12]
 8002ece:	4311      	orrs	r1, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	000186a0 	.word	0x000186a0
 8002f30:	001e847f 	.word	0x001e847f
 8002f34:	003d08ff 	.word	0x003d08ff
 8002f38:	431bde83 	.word	0x431bde83
 8002f3c:	10624dd3 	.word	0x10624dd3

08002f40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	4608      	mov	r0, r1
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	817b      	strh	r3, [r7, #10]
 8002f52:	460b      	mov	r3, r1
 8002f54:	813b      	strh	r3, [r7, #8]
 8002f56:	4613      	mov	r3, r2
 8002f58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f5a:	f7ff fb23 	bl	80025a4 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	f040 80d9 	bne.w	8003120 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2319      	movs	r3, #25
 8002f74:	2201      	movs	r2, #1
 8002f76:	496d      	ldr	r1, [pc, #436]	@ (800312c <HAL_I2C_Mem_Write+0x1ec>)
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 fdfb 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
 8002f86:	e0cc      	b.n	8003122 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_I2C_Mem_Write+0x56>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e0c5      	b.n	8003122 <HAL_I2C_Mem_Write+0x1e2>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d007      	beq.n	8002fbc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2221      	movs	r2, #33	@ 0x21
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2240      	movs	r2, #64	@ 0x40
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a3a      	ldr	r2, [r7, #32]
 8002fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002fec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4a4d      	ldr	r2, [pc, #308]	@ (8003130 <HAL_I2C_Mem_Write+0x1f0>)
 8002ffc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ffe:	88f8      	ldrh	r0, [r7, #6]
 8003000:	893a      	ldrh	r2, [r7, #8]
 8003002:	8979      	ldrh	r1, [r7, #10]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	4603      	mov	r3, r0
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fc32 	bl	8003878 <I2C_RequestMemoryWrite>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d052      	beq.n	80030c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e081      	b.n	8003122 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fec0 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00d      	beq.n	800304a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	2b04      	cmp	r3, #4
 8003034:	d107      	bne.n	8003046 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003044:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e06b      	b.n	8003122 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	781a      	ldrb	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b04      	cmp	r3, #4
 8003086:	d11b      	bne.n	80030c0 <HAL_I2C_Mem_Write+0x180>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	d017      	beq.n	80030c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1aa      	bne.n	800301e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 feb3 	bl	8003e38 <I2C_WaitOnBTFFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00d      	beq.n	80030f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d107      	bne.n	80030f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e016      	b.n	8003122 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	e000      	b.n	8003122 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003120:	2302      	movs	r3, #2
  }
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	00100002 	.word	0x00100002
 8003130:	ffff0000 	.word	0xffff0000

08003134 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	@ 0x30
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	4608      	mov	r0, r1
 800313e:	4611      	mov	r1, r2
 8003140:	461a      	mov	r2, r3
 8003142:	4603      	mov	r3, r0
 8003144:	817b      	strh	r3, [r7, #10]
 8003146:	460b      	mov	r3, r1
 8003148:	813b      	strh	r3, [r7, #8]
 800314a:	4613      	mov	r3, r2
 800314c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003152:	f7ff fa27 	bl	80025a4 <HAL_GetTick>
 8003156:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b20      	cmp	r3, #32
 8003162:	f040 8250 	bne.w	8003606 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	2319      	movs	r3, #25
 800316c:	2201      	movs	r2, #1
 800316e:	4982      	ldr	r1, [pc, #520]	@ (8003378 <HAL_I2C_Mem_Read+0x244>)
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fcff 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
 800317e:	e243      	b.n	8003608 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_I2C_Mem_Read+0x5a>
 800318a:	2302      	movs	r3, #2
 800318c:	e23c      	b.n	8003608 <HAL_I2C_Mem_Read+0x4d4>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d007      	beq.n	80031b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2222      	movs	r2, #34	@ 0x22
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2240      	movs	r2, #64	@ 0x40
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80031e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4a62      	ldr	r2, [pc, #392]	@ (800337c <HAL_I2C_Mem_Read+0x248>)
 80031f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031f6:	88f8      	ldrh	r0, [r7, #6]
 80031f8:	893a      	ldrh	r2, [r7, #8]
 80031fa:	8979      	ldrh	r1, [r7, #10]
 80031fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	4603      	mov	r3, r0
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fbcc 	bl	80039a4 <I2C_RequestMemoryRead>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e1f8      	b.n	8003608 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d113      	bne.n	8003246 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	61fb      	str	r3, [r7, #28]
 8003232:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e1cc      	b.n	80035e0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324a:	2b01      	cmp	r3, #1
 800324c:	d11e      	bne.n	800328c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800325c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800325e:	b672      	cpsid	i
}
 8003260:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003286:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003288:	b662      	cpsie	i
}
 800328a:	e035      	b.n	80032f8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003290:	2b02      	cmp	r3, #2
 8003292:	d11e      	bne.n	80032d2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032a4:	b672      	cpsid	i
}
 80032a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032ce:	b662      	cpsie	i
}
 80032d0:	e012      	b.n	80032f8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032e0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80032f8:	e172      	b.n	80035e0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fe:	2b03      	cmp	r3, #3
 8003300:	f200 811f 	bhi.w	8003542 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003308:	2b01      	cmp	r3, #1
 800330a:	d123      	bne.n	8003354 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800330e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fdd9 	bl	8003ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e173      	b.n	8003608 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003352:	e145      	b.n	80035e0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003358:	2b02      	cmp	r3, #2
 800335a:	d152      	bne.n	8003402 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003362:	2200      	movs	r2, #0
 8003364:	4906      	ldr	r1, [pc, #24]	@ (8003380 <HAL_I2C_Mem_Read+0x24c>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fc04 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e148      	b.n	8003608 <HAL_I2C_Mem_Read+0x4d4>
 8003376:	bf00      	nop
 8003378:	00100002 	.word	0x00100002
 800337c:	ffff0000 	.word	0xffff0000
 8003380:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003384:	b672      	cpsid	i
}
 8003386:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033ca:	b662      	cpsie	i
}
 80033cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003400:	e0ee      	b.n	80035e0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003408:	2200      	movs	r2, #0
 800340a:	4981      	ldr	r1, [pc, #516]	@ (8003610 <HAL_I2C_Mem_Read+0x4dc>)
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fbb1 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0f5      	b.n	8003608 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800342c:	b672      	cpsid	i
}
 800342e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003462:	4b6c      	ldr	r3, [pc, #432]	@ (8003614 <HAL_I2C_Mem_Read+0x4e0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	08db      	lsrs	r3, r3, #3
 8003468:	4a6b      	ldr	r2, [pc, #428]	@ (8003618 <HAL_I2C_Mem_Read+0x4e4>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	0a1a      	lsrs	r2, r3, #8
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00da      	lsls	r2, r3, #3
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	3b01      	subs	r3, #1
 8003480:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d118      	bne.n	80034ba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	f043 0220 	orr.w	r2, r3, #32
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80034aa:	b662      	cpsie	i
}
 80034ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e0a6      	b.n	8003608 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d1d9      	bne.n	800347c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800350a:	b662      	cpsie	i
}
 800350c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003540:	e04e      	b.n	80035e0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003544:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fcbe 	bl	8003ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e058      	b.n	8003608 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b04      	cmp	r3, #4
 8003594:	d124      	bne.n	80035e0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359a:	2b03      	cmp	r3, #3
 800359c:	d107      	bne.n	80035ae <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f47f ae88 	bne.w	80032fa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	e000      	b.n	8003608 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003606:	2302      	movs	r3, #2
  }
}
 8003608:	4618      	mov	r0, r3
 800360a:	3728      	adds	r7, #40	@ 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	00010004 	.word	0x00010004
 8003614:	20000068 	.word	0x20000068
 8003618:	14f8b589 	.word	0x14f8b589

0800361c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	@ 0x28
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	460b      	mov	r3, r1
 800362a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800362c:	f7fe ffba 	bl	80025a4 <HAL_GetTick>
 8003630:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b20      	cmp	r3, #32
 8003640:	f040 8111 	bne.w	8003866 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2319      	movs	r3, #25
 800364a:	2201      	movs	r2, #1
 800364c:	4988      	ldr	r1, [pc, #544]	@ (8003870 <HAL_I2C_IsDeviceReady+0x254>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fa90 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800365a:	2302      	movs	r3, #2
 800365c:	e104      	b.n	8003868 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_I2C_IsDeviceReady+0x50>
 8003668:	2302      	movs	r3, #2
 800366a:	e0fd      	b.n	8003868 <HAL_I2C_IsDeviceReady+0x24c>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d007      	beq.n	8003692 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2224      	movs	r2, #36	@ 0x24
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a70      	ldr	r2, [pc, #448]	@ (8003874 <HAL_I2C_IsDeviceReady+0x258>)
 80036b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 fa4e 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00d      	beq.n	80036fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ec:	d103      	bne.n	80036f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036f4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e0b6      	b.n	8003868 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036fa:	897b      	ldrh	r3, [r7, #10]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003708:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800370a:	f7fe ff4b 	bl	80025a4 <HAL_GetTick>
 800370e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003734:	bf0c      	ite	eq
 8003736:	2301      	moveq	r3, #1
 8003738:	2300      	movne	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800373e:	e025      	b.n	800378c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003740:	f7fe ff30 	bl	80025a4 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d302      	bcc.n	8003756 <HAL_I2C_IsDeviceReady+0x13a>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	22a0      	movs	r2, #160	@ 0xa0
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b02      	cmp	r3, #2
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800377e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2ba0      	cmp	r3, #160	@ 0xa0
 8003796:	d005      	beq.n	80037a4 <HAL_I2C_IsDeviceReady+0x188>
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d102      	bne.n	80037a4 <HAL_I2C_IsDeviceReady+0x188>
 800379e:	7dbb      	ldrb	r3, [r7, #22]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0cd      	beq.n	8003740 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d129      	bne.n	800380e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	2319      	movs	r3, #25
 80037e6:	2201      	movs	r2, #1
 80037e8:	4921      	ldr	r1, [pc, #132]	@ (8003870 <HAL_I2C_IsDeviceReady+0x254>)
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f9c2 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e036      	b.n	8003868 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	e02c      	b.n	8003868 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003826:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2319      	movs	r3, #25
 800382e:	2201      	movs	r2, #1
 8003830:	490f      	ldr	r1, [pc, #60]	@ (8003870 <HAL_I2C_IsDeviceReady+0x254>)
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f99e 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e012      	b.n	8003868 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	3301      	adds	r3, #1
 8003846:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	f4ff af32 	bcc.w	80036b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003866:	2302      	movs	r3, #2
  }
}
 8003868:	4618      	mov	r0, r3
 800386a:	3720      	adds	r7, #32
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	00100002 	.word	0x00100002
 8003874:	ffff0000 	.word	0xffff0000

08003878 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	4608      	mov	r0, r1
 8003882:	4611      	mov	r1, r2
 8003884:	461a      	mov	r2, r3
 8003886:	4603      	mov	r3, r0
 8003888:	817b      	strh	r3, [r7, #10]
 800388a:	460b      	mov	r3, r1
 800388c:	813b      	strh	r3, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f960 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c8:	d103      	bne.n	80038d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e05f      	b.n	8003996 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038d6:	897b      	ldrh	r3, [r7, #10]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	6a3a      	ldr	r2, [r7, #32]
 80038ea:	492d      	ldr	r1, [pc, #180]	@ (80039a0 <I2C_RequestMemoryWrite+0x128>)
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f9bb 	bl	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e04c      	b.n	8003996 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003914:	6a39      	ldr	r1, [r7, #32]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fa46 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	2b04      	cmp	r3, #4
 8003928:	d107      	bne.n	800393a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003938:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e02b      	b.n	8003996 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003944:	893b      	ldrh	r3, [r7, #8]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	611a      	str	r2, [r3, #16]
 800394e:	e021      	b.n	8003994 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003950:	893b      	ldrh	r3, [r7, #8]
 8003952:	0a1b      	lsrs	r3, r3, #8
 8003954:	b29b      	uxth	r3, r3
 8003956:	b2da      	uxtb	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003960:	6a39      	ldr	r1, [r7, #32]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fa20 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	2b04      	cmp	r3, #4
 8003974:	d107      	bne.n	8003986 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003984:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e005      	b.n	8003996 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800398a:	893b      	ldrh	r3, [r7, #8]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	00010002 	.word	0x00010002

080039a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	460b      	mov	r3, r1
 80039b8:	813b      	strh	r3, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f8c2 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00d      	beq.n	8003a12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a04:	d103      	bne.n	8003a0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e0aa      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a12:	897b      	ldrh	r3, [r7, #10]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	6a3a      	ldr	r2, [r7, #32]
 8003a26:	4952      	ldr	r1, [pc, #328]	@ (8003b70 <I2C_RequestMemoryRead+0x1cc>)
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f91d 	bl	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e097      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a50:	6a39      	ldr	r1, [r7, #32]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f9a8 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00d      	beq.n	8003a7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d107      	bne.n	8003a76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e076      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a80:	893b      	ldrh	r3, [r7, #8]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	611a      	str	r2, [r3, #16]
 8003a8a:	e021      	b.n	8003ad0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a8c:	893b      	ldrh	r3, [r7, #8]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a9c:	6a39      	ldr	r1, [r7, #32]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f982 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d107      	bne.n	8003ac2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e050      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ac6:	893b      	ldrh	r3, [r7, #8]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad2:	6a39      	ldr	r1, [r7, #32]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f967 	bl	8003da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00d      	beq.n	8003afc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d107      	bne.n	8003af8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e035      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f82b 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b32:	d103      	bne.n	8003b3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e013      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b40:	897b      	ldrh	r3, [r7, #10]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	6a3a      	ldr	r2, [r7, #32]
 8003b54:	4906      	ldr	r1, [pc, #24]	@ (8003b70 <I2C_RequestMemoryRead+0x1cc>)
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f886 	bl	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	00010002 	.word	0x00010002

08003b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b84:	e048      	b.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d044      	beq.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fe fd09 	bl	80025a4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d139      	bne.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	0c1b      	lsrs	r3, r3, #16
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d10d      	bne.n	8003bca <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	43da      	mvns	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	e00c      	b.n	8003be4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	43da      	mvns	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d116      	bne.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	f043 0220 	orr.w	r2, r3, #32
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e023      	b.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	0c1b      	lsrs	r3, r3, #16
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d10d      	bne.n	8003c3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	43da      	mvns	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	e00c      	b.n	8003c58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	43da      	mvns	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d093      	beq.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c76:	e071      	b.n	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c86:	d123      	bne.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ca0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	f043 0204 	orr.w	r2, r3, #4
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e067      	b.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d041      	beq.n	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd8:	f7fe fc64 	bl	80025a4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d302      	bcc.n	8003cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d136      	bne.n	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d10c      	bne.n	8003d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	bf14      	ite	ne
 8003d0a:	2301      	movne	r3, #1
 8003d0c:	2300      	moveq	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	e00b      	b.n	8003d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	43da      	mvns	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf14      	ite	ne
 8003d24:	2301      	movne	r3, #1
 8003d26:	2300      	moveq	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e021      	b.n	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	0c1b      	lsrs	r3, r3, #16
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d10c      	bne.n	8003d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4013      	ands	r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf14      	ite	ne
 8003d78:	2301      	movne	r3, #1
 8003d7a:	2300      	moveq	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e00b      	b.n	8003d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	43da      	mvns	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf14      	ite	ne
 8003d92:	2301      	movne	r3, #1
 8003d94:	2300      	moveq	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f47f af6d 	bne.w	8003c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003db4:	e034      	b.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f8e3 	bl	8003f82 <I2C_IsAcknowledgeFailed>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e034      	b.n	8003e30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d028      	beq.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dce:	f7fe fbe9 	bl	80025a4 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d11d      	bne.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dee:	2b80      	cmp	r3, #128	@ 0x80
 8003df0:	d016      	beq.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e007      	b.n	8003e30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e2a:	2b80      	cmp	r3, #128	@ 0x80
 8003e2c:	d1c3      	bne.n	8003db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e44:	e034      	b.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f89b 	bl	8003f82 <I2C_IsAcknowledgeFailed>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e034      	b.n	8003ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d028      	beq.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5e:	f7fe fba1 	bl	80025a4 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d11d      	bne.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d016      	beq.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	f043 0220 	orr.w	r2, r3, #32
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e007      	b.n	8003ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d1c3      	bne.n	8003e46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ed4:	e049      	b.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d119      	bne.n	8003f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0210 	mvn.w	r2, #16
 8003eec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e030      	b.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f18:	f7fe fb44 	bl	80025a4 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d11d      	bne.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f38:	2b40      	cmp	r3, #64	@ 0x40
 8003f3a:	d016      	beq.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e007      	b.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f74:	2b40      	cmp	r3, #64	@ 0x40
 8003f76:	d1ae      	bne.n	8003ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f98:	d11b      	bne.n	8003fd2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fa2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	f043 0204 	orr.w	r2, r3, #4
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
	...

08003fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e272      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8087 	beq.w	800410e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004000:	4b92      	ldr	r3, [pc, #584]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b04      	cmp	r3, #4
 800400a:	d00c      	beq.n	8004026 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800400c:	4b8f      	ldr	r3, [pc, #572]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 030c 	and.w	r3, r3, #12
 8004014:	2b08      	cmp	r3, #8
 8004016:	d112      	bne.n	800403e <HAL_RCC_OscConfig+0x5e>
 8004018:	4b8c      	ldr	r3, [pc, #560]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004024:	d10b      	bne.n	800403e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004026:	4b89      	ldr	r3, [pc, #548]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d06c      	beq.n	800410c <HAL_RCC_OscConfig+0x12c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d168      	bne.n	800410c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e24c      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004046:	d106      	bne.n	8004056 <HAL_RCC_OscConfig+0x76>
 8004048:	4b80      	ldr	r3, [pc, #512]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a7f      	ldr	r2, [pc, #508]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 800404e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	e02e      	b.n	80040b4 <HAL_RCC_OscConfig+0xd4>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10c      	bne.n	8004078 <HAL_RCC_OscConfig+0x98>
 800405e:	4b7b      	ldr	r3, [pc, #492]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a7a      	ldr	r2, [pc, #488]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	4b78      	ldr	r3, [pc, #480]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a77      	ldr	r2, [pc, #476]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004070:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e01d      	b.n	80040b4 <HAL_RCC_OscConfig+0xd4>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004080:	d10c      	bne.n	800409c <HAL_RCC_OscConfig+0xbc>
 8004082:	4b72      	ldr	r3, [pc, #456]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a71      	ldr	r2, [pc, #452]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	4b6f      	ldr	r3, [pc, #444]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a6e      	ldr	r2, [pc, #440]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e00b      	b.n	80040b4 <HAL_RCC_OscConfig+0xd4>
 800409c:	4b6b      	ldr	r3, [pc, #428]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6a      	ldr	r2, [pc, #424]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 80040a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	4b68      	ldr	r3, [pc, #416]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a67      	ldr	r2, [pc, #412]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 80040ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d013      	beq.n	80040e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fe fa72 	bl	80025a4 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c4:	f7fe fa6e 	bl	80025a4 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	@ 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e200      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d6:	4b5d      	ldr	r3, [pc, #372]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0xe4>
 80040e2:	e014      	b.n	800410e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fe fa5e 	bl	80025a4 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fe fa5a 	bl	80025a4 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	@ 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e1ec      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fe:	4b53      	ldr	r3, [pc, #332]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x10c>
 800410a:	e000      	b.n	800410e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d063      	beq.n	80041e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800411a:	4b4c      	ldr	r3, [pc, #304]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00b      	beq.n	800413e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004126:	4b49      	ldr	r3, [pc, #292]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	2b08      	cmp	r3, #8
 8004130:	d11c      	bne.n	800416c <HAL_RCC_OscConfig+0x18c>
 8004132:	4b46      	ldr	r3, [pc, #280]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d116      	bne.n	800416c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413e:	4b43      	ldr	r3, [pc, #268]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <HAL_RCC_OscConfig+0x176>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d001      	beq.n	8004156 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e1c0      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004156:	4b3d      	ldr	r3, [pc, #244]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4939      	ldr	r1, [pc, #228]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416a:	e03a      	b.n	80041e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d020      	beq.n	80041b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004174:	4b36      	ldr	r3, [pc, #216]	@ (8004250 <HAL_RCC_OscConfig+0x270>)
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fe fa13 	bl	80025a4 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004182:	f7fe fa0f 	bl	80025a4 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e1a1      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004194:	4b2d      	ldr	r3, [pc, #180]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a0:	4b2a      	ldr	r3, [pc, #168]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4927      	ldr	r1, [pc, #156]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]
 80041b4:	e015      	b.n	80041e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b6:	4b26      	ldr	r3, [pc, #152]	@ (8004250 <HAL_RCC_OscConfig+0x270>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7fe f9f2 	bl	80025a4 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c4:	f7fe f9ee 	bl	80025a4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e180      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d6:	4b1d      	ldr	r3, [pc, #116]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d03a      	beq.n	8004264 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d019      	beq.n	800422a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f6:	4b17      	ldr	r3, [pc, #92]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fc:	f7fe f9d2 	bl	80025a4 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004204:	f7fe f9ce 	bl	80025a4 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e160      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004216:	4b0d      	ldr	r3, [pc, #52]	@ (800424c <HAL_RCC_OscConfig+0x26c>)
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004222:	2001      	movs	r0, #1
 8004224:	f000 face 	bl	80047c4 <RCC_Delay>
 8004228:	e01c      	b.n	8004264 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800422a:	4b0a      	ldr	r3, [pc, #40]	@ (8004254 <HAL_RCC_OscConfig+0x274>)
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004230:	f7fe f9b8 	bl	80025a4 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004236:	e00f      	b.n	8004258 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004238:	f7fe f9b4 	bl	80025a4 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d908      	bls.n	8004258 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e146      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000
 8004250:	42420000 	.word	0x42420000
 8004254:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004258:	4b92      	ldr	r3, [pc, #584]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e9      	bne.n	8004238 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80a6 	beq.w	80043be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004272:	2300      	movs	r3, #0
 8004274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004276:	4b8b      	ldr	r3, [pc, #556]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10d      	bne.n	800429e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004282:	4b88      	ldr	r3, [pc, #544]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	4a87      	ldr	r2, [pc, #540]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800428c:	61d3      	str	r3, [r2, #28]
 800428e:	4b85      	ldr	r3, [pc, #532]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800429a:	2301      	movs	r3, #1
 800429c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429e:	4b82      	ldr	r3, [pc, #520]	@ (80044a8 <HAL_RCC_OscConfig+0x4c8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d118      	bne.n	80042dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042aa:	4b7f      	ldr	r3, [pc, #508]	@ (80044a8 <HAL_RCC_OscConfig+0x4c8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a7e      	ldr	r2, [pc, #504]	@ (80044a8 <HAL_RCC_OscConfig+0x4c8>)
 80042b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b6:	f7fe f975 	bl	80025a4 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042be:	f7fe f971 	bl	80025a4 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b64      	cmp	r3, #100	@ 0x64
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e103      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d0:	4b75      	ldr	r3, [pc, #468]	@ (80044a8 <HAL_RCC_OscConfig+0x4c8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d106      	bne.n	80042f2 <HAL_RCC_OscConfig+0x312>
 80042e4:	4b6f      	ldr	r3, [pc, #444]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	4a6e      	ldr	r2, [pc, #440]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6213      	str	r3, [r2, #32]
 80042f0:	e02d      	b.n	800434e <HAL_RCC_OscConfig+0x36e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10c      	bne.n	8004314 <HAL_RCC_OscConfig+0x334>
 80042fa:	4b6a      	ldr	r3, [pc, #424]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4a69      	ldr	r2, [pc, #420]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	6213      	str	r3, [r2, #32]
 8004306:	4b67      	ldr	r3, [pc, #412]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	4a66      	ldr	r2, [pc, #408]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	f023 0304 	bic.w	r3, r3, #4
 8004310:	6213      	str	r3, [r2, #32]
 8004312:	e01c      	b.n	800434e <HAL_RCC_OscConfig+0x36e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b05      	cmp	r3, #5
 800431a:	d10c      	bne.n	8004336 <HAL_RCC_OscConfig+0x356>
 800431c:	4b61      	ldr	r3, [pc, #388]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	4a60      	ldr	r2, [pc, #384]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004322:	f043 0304 	orr.w	r3, r3, #4
 8004326:	6213      	str	r3, [r2, #32]
 8004328:	4b5e      	ldr	r3, [pc, #376]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	4a5d      	ldr	r2, [pc, #372]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	6213      	str	r3, [r2, #32]
 8004334:	e00b      	b.n	800434e <HAL_RCC_OscConfig+0x36e>
 8004336:	4b5b      	ldr	r3, [pc, #364]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	4a5a      	ldr	r2, [pc, #360]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	6213      	str	r3, [r2, #32]
 8004342:	4b58      	ldr	r3, [pc, #352]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4a57      	ldr	r2, [pc, #348]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004348:	f023 0304 	bic.w	r3, r3, #4
 800434c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d015      	beq.n	8004382 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004356:	f7fe f925 	bl	80025a4 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435c:	e00a      	b.n	8004374 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435e:	f7fe f921 	bl	80025a4 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436c:	4293      	cmp	r3, r2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e0b1      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004374:	4b4b      	ldr	r3, [pc, #300]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0ee      	beq.n	800435e <HAL_RCC_OscConfig+0x37e>
 8004380:	e014      	b.n	80043ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004382:	f7fe f90f 	bl	80025a4 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438a:	f7fe f90b 	bl	80025a4 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004398:	4293      	cmp	r3, r2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e09b      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a0:	4b40      	ldr	r3, [pc, #256]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1ee      	bne.n	800438a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d105      	bne.n	80043be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b2:	4b3c      	ldr	r3, [pc, #240]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	4a3b      	ldr	r2, [pc, #236]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 80043b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 8087 	beq.w	80044d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043c8:	4b36      	ldr	r3, [pc, #216]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d061      	beq.n	8004498 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d146      	bne.n	800446a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043dc:	4b33      	ldr	r3, [pc, #204]	@ (80044ac <HAL_RCC_OscConfig+0x4cc>)
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e2:	f7fe f8df 	bl	80025a4 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ea:	f7fe f8db 	bl	80025a4 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e06d      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043fc:	4b29      	ldr	r3, [pc, #164]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1f0      	bne.n	80043ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004410:	d108      	bne.n	8004424 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004412:	4b24      	ldr	r3, [pc, #144]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	4921      	ldr	r1, [pc, #132]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004424:	4b1f      	ldr	r3, [pc, #124]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a19      	ldr	r1, [r3, #32]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	430b      	orrs	r3, r1
 8004436:	491b      	ldr	r1, [pc, #108]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800443c:	4b1b      	ldr	r3, [pc, #108]	@ (80044ac <HAL_RCC_OscConfig+0x4cc>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fe f8af 	bl	80025a4 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444a:	f7fe f8ab 	bl	80025a4 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e03d      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800445c:	4b11      	ldr	r3, [pc, #68]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCC_OscConfig+0x46a>
 8004468:	e035      	b.n	80044d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446a:	4b10      	ldr	r3, [pc, #64]	@ (80044ac <HAL_RCC_OscConfig+0x4cc>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7fe f898 	bl	80025a4 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004478:	f7fe f894 	bl	80025a4 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e026      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800448a:	4b06      	ldr	r3, [pc, #24]	@ (80044a4 <HAL_RCC_OscConfig+0x4c4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x498>
 8004496:	e01e      	b.n	80044d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e019      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40007000 	.word	0x40007000
 80044ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044b0:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <HAL_RCC_OscConfig+0x500>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d106      	bne.n	80044d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40021000 	.word	0x40021000

080044e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0d0      	b.n	800469a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044f8:	4b6a      	ldr	r3, [pc, #424]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d910      	bls.n	8004528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004506:	4b67      	ldr	r3, [pc, #412]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 0207 	bic.w	r2, r3, #7
 800450e:	4965      	ldr	r1, [pc, #404]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	4313      	orrs	r3, r2
 8004514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	4b63      	ldr	r3, [pc, #396]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0b8      	b.n	800469a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d020      	beq.n	8004576 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004540:	4b59      	ldr	r3, [pc, #356]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	4a58      	ldr	r2, [pc, #352]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800454a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004558:	4b53      	ldr	r3, [pc, #332]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4a52      	ldr	r2, [pc, #328]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800455e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004562:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004564:	4b50      	ldr	r3, [pc, #320]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	494d      	ldr	r1, [pc, #308]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d040      	beq.n	8004604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d107      	bne.n	800459a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	4b47      	ldr	r3, [pc, #284]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d115      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e07f      	b.n	800469a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a2:	4b41      	ldr	r3, [pc, #260]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e073      	b.n	800469a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b2:	4b3d      	ldr	r3, [pc, #244]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e06b      	b.n	800469a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c2:	4b39      	ldr	r3, [pc, #228]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f023 0203 	bic.w	r2, r3, #3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	4936      	ldr	r1, [pc, #216]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d4:	f7fd ffe6 	bl	80025a4 <HAL_GetTick>
 80045d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045dc:	f7fd ffe2 	bl	80025a4 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e053      	b.n	800469a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	4b2d      	ldr	r3, [pc, #180]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 020c 	and.w	r2, r3, #12
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	429a      	cmp	r2, r3
 8004602:	d1eb      	bne.n	80045dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004604:	4b27      	ldr	r3, [pc, #156]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d210      	bcs.n	8004634 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b24      	ldr	r3, [pc, #144]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 0207 	bic.w	r2, r3, #7
 800461a:	4922      	ldr	r1, [pc, #136]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c0>)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	4313      	orrs	r3, r2
 8004620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b20      	ldr	r3, [pc, #128]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e032      	b.n	800469a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004640:	4b19      	ldr	r3, [pc, #100]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4916      	ldr	r1, [pc, #88]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800465e:	4b12      	ldr	r3, [pc, #72]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	490e      	ldr	r1, [pc, #56]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800466e:	4313      	orrs	r3, r2
 8004670:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004672:	f000 f821 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8004676:	4602      	mov	r2, r0
 8004678:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c4>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	490a      	ldr	r1, [pc, #40]	@ (80046ac <HAL_RCC_ClockConfig+0x1c8>)
 8004684:	5ccb      	ldrb	r3, [r1, r3]
 8004686:	fa22 f303 	lsr.w	r3, r2, r3
 800468a:	4a09      	ldr	r2, [pc, #36]	@ (80046b0 <HAL_RCC_ClockConfig+0x1cc>)
 800468c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800468e:	4b09      	ldr	r3, [pc, #36]	@ (80046b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7fd ff44 	bl	8002520 <HAL_InitTick>

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40022000 	.word	0x40022000
 80046a8:	40021000 	.word	0x40021000
 80046ac:	08006900 	.word	0x08006900
 80046b0:	20000068 	.word	0x20000068
 80046b4:	2000006c 	.word	0x2000006c

080046b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	2300      	movs	r3, #0
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	2300      	movs	r3, #0
 80046cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046d2:	4b1e      	ldr	r3, [pc, #120]	@ (800474c <HAL_RCC_GetSysClockFreq+0x94>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 030c 	and.w	r3, r3, #12
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d002      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x30>
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d003      	beq.n	80046ee <HAL_RCC_GetSysClockFreq+0x36>
 80046e6:	e027      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046e8:	4b19      	ldr	r3, [pc, #100]	@ (8004750 <HAL_RCC_GetSysClockFreq+0x98>)
 80046ea:	613b      	str	r3, [r7, #16]
      break;
 80046ec:	e027      	b.n	800473e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	0c9b      	lsrs	r3, r3, #18
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	4a17      	ldr	r2, [pc, #92]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x9c>)
 80046f8:	5cd3      	ldrb	r3, [r2, r3]
 80046fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d010      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004706:	4b11      	ldr	r3, [pc, #68]	@ (800474c <HAL_RCC_GetSysClockFreq+0x94>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	0c5b      	lsrs	r3, r3, #17
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	4a11      	ldr	r2, [pc, #68]	@ (8004758 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004712:	5cd3      	ldrb	r3, [r2, r3]
 8004714:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a0d      	ldr	r2, [pc, #52]	@ (8004750 <HAL_RCC_GetSysClockFreq+0x98>)
 800471a:	fb03 f202 	mul.w	r2, r3, r2
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e004      	b.n	8004732 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a0c      	ldr	r2, [pc, #48]	@ (800475c <HAL_RCC_GetSysClockFreq+0xa4>)
 800472c:	fb02 f303 	mul.w	r3, r2, r3
 8004730:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	613b      	str	r3, [r7, #16]
      break;
 8004736:	e002      	b.n	800473e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004738:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <HAL_RCC_GetSysClockFreq+0x98>)
 800473a:	613b      	str	r3, [r7, #16]
      break;
 800473c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800473e:	693b      	ldr	r3, [r7, #16]
}
 8004740:	4618      	mov	r0, r3
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000
 8004750:	007a1200 	.word	0x007a1200
 8004754:	08006918 	.word	0x08006918
 8004758:	08006928 	.word	0x08006928
 800475c:	003d0900 	.word	0x003d0900

08004760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004764:	4b02      	ldr	r3, [pc, #8]	@ (8004770 <HAL_RCC_GetHCLKFreq+0x10>)
 8004766:	681b      	ldr	r3, [r3, #0]
}
 8004768:	4618      	mov	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	20000068 	.word	0x20000068

08004774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004778:	f7ff fff2 	bl	8004760 <HAL_RCC_GetHCLKFreq>
 800477c:	4602      	mov	r2, r0
 800477e:	4b05      	ldr	r3, [pc, #20]	@ (8004794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	4903      	ldr	r1, [pc, #12]	@ (8004798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800478a:	5ccb      	ldrb	r3, [r1, r3]
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004790:	4618      	mov	r0, r3
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40021000 	.word	0x40021000
 8004798:	08006910 	.word	0x08006910

0800479c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047a0:	f7ff ffde 	bl	8004760 <HAL_RCC_GetHCLKFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b05      	ldr	r3, [pc, #20]	@ (80047bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	0adb      	lsrs	r3, r3, #11
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	4903      	ldr	r1, [pc, #12]	@ (80047c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047b2:	5ccb      	ldrb	r3, [r1, r3]
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40021000 	.word	0x40021000
 80047c0:	08006910 	.word	0x08006910

080047c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047cc:	4b0a      	ldr	r3, [pc, #40]	@ (80047f8 <RCC_Delay+0x34>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0a      	ldr	r2, [pc, #40]	@ (80047fc <RCC_Delay+0x38>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	0a5b      	lsrs	r3, r3, #9
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047e0:	bf00      	nop
  }
  while (Delay --);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1e5a      	subs	r2, r3, #1
 80047e6:	60fa      	str	r2, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f9      	bne.n	80047e0 <RCC_Delay+0x1c>
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr
 80047f8:	20000068 	.word	0x20000068
 80047fc:	10624dd3 	.word	0x10624dd3

08004800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e041      	b.n	8004896 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fd fd3c 	bl	80022a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3304      	adds	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f000 fc18 	bl	8005074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d001      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e03a      	b.n	800492e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a18      	ldr	r2, [pc, #96]	@ (8004938 <HAL_TIM_Base_Start_IT+0x98>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x58>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e2:	d009      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x58>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a14      	ldr	r2, [pc, #80]	@ (800493c <HAL_TIM_Base_Start_IT+0x9c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x58>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a13      	ldr	r2, [pc, #76]	@ (8004940 <HAL_TIM_Base_Start_IT+0xa0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d111      	bne.n	800491c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b06      	cmp	r3, #6
 8004908:	d010      	beq.n	800492c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0201 	orr.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491a:	e007      	b.n	800492c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40000400 	.word	0x40000400
 8004940:	40000800 	.word	0x40000800

08004944 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e041      	b.n	80049da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f839 	bl	80049e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3304      	adds	r3, #4
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f000 fb76 	bl	8005074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d109      	bne.n	8004a18 <HAL_TIM_PWM_Start+0x24>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e022      	b.n	8004a5e <HAL_TIM_PWM_Start+0x6a>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d109      	bne.n	8004a32 <HAL_TIM_PWM_Start+0x3e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e015      	b.n	8004a5e <HAL_TIM_PWM_Start+0x6a>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d109      	bne.n	8004a4c <HAL_TIM_PWM_Start+0x58>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	e008      	b.n	8004a5e <HAL_TIM_PWM_Start+0x6a>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e05e      	b.n	8004b24 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d104      	bne.n	8004a76 <HAL_TIM_PWM_Start+0x82>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a74:	e013      	b.n	8004a9e <HAL_TIM_PWM_Start+0xaa>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d104      	bne.n	8004a86 <HAL_TIM_PWM_Start+0x92>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a84:	e00b      	b.n	8004a9e <HAL_TIM_PWM_Start+0xaa>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d104      	bne.n	8004a96 <HAL_TIM_PWM_Start+0xa2>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a94:	e003      	b.n	8004a9e <HAL_TIM_PWM_Start+0xaa>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	6839      	ldr	r1, [r7, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fd70 	bl	800558c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8004b2c <HAL_TIM_PWM_Start+0x138>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d107      	bne.n	8004ac6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ac4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a18      	ldr	r2, [pc, #96]	@ (8004b2c <HAL_TIM_PWM_Start+0x138>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00e      	beq.n	8004aee <HAL_TIM_PWM_Start+0xfa>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad8:	d009      	beq.n	8004aee <HAL_TIM_PWM_Start+0xfa>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a14      	ldr	r2, [pc, #80]	@ (8004b30 <HAL_TIM_PWM_Start+0x13c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d004      	beq.n	8004aee <HAL_TIM_PWM_Start+0xfa>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a12      	ldr	r2, [pc, #72]	@ (8004b34 <HAL_TIM_PWM_Start+0x140>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d111      	bne.n	8004b12 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b06      	cmp	r3, #6
 8004afe:	d010      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b10:	e007      	b.n	8004b22 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0201 	orr.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	40000400 	.word	0x40000400
 8004b34:	40000800 	.word	0x40000800

08004b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d020      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0202 	mvn.w	r2, #2
 8004b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa5a 	bl	800503c <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa4d 	bl	800502a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fa5c 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d020      	beq.n	8004be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01b      	beq.n	8004be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0204 	mvn.w	r2, #4
 8004bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa34 	bl	800503c <HAL_TIM_IC_CaptureCallback>
 8004bd4:	e005      	b.n	8004be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fa27 	bl	800502a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fa36 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d020      	beq.n	8004c34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01b      	beq.n	8004c34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0208 	mvn.w	r2, #8
 8004c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fa0e 	bl	800503c <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa01 	bl	800502a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fa10 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d020      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0210 	mvn.w	r2, #16
 8004c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2208      	movs	r2, #8
 8004c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f9e8 	bl	800503c <HAL_TIM_IC_CaptureCallback>
 8004c6c:	e005      	b.n	8004c7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f9db 	bl	800502a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f9ea 	bl	800504e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00c      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0201 	mvn.w	r2, #1
 8004c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fd fa56 	bl	8002150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d007      	beq.n	8004cc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fced 	bl	80056a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00c      	beq.n	8004cec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f9ba 	bl	8005060 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00c      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0220 	mvn.w	r2, #32
 8004d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fcc0 	bl	8005690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e0ae      	b.n	8004e94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b0c      	cmp	r3, #12
 8004d42:	f200 809f 	bhi.w	8004e84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d46:	a201      	add	r2, pc, #4	@ (adr r2, 8004d4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d81 	.word	0x08004d81
 8004d50:	08004e85 	.word	0x08004e85
 8004d54:	08004e85 	.word	0x08004e85
 8004d58:	08004e85 	.word	0x08004e85
 8004d5c:	08004dc1 	.word	0x08004dc1
 8004d60:	08004e85 	.word	0x08004e85
 8004d64:	08004e85 	.word	0x08004e85
 8004d68:	08004e85 	.word	0x08004e85
 8004d6c:	08004e03 	.word	0x08004e03
 8004d70:	08004e85 	.word	0x08004e85
 8004d74:	08004e85 	.word	0x08004e85
 8004d78:	08004e85 	.word	0x08004e85
 8004d7c:	08004e43 	.word	0x08004e43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f9e2 	bl	8005150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0208 	orr.w	r2, r2, #8
 8004d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0204 	bic.w	r2, r2, #4
 8004daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6999      	ldr	r1, [r3, #24]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	619a      	str	r2, [r3, #24]
      break;
 8004dbe:	e064      	b.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fa28 	bl	800521c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6999      	ldr	r1, [r3, #24]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	021a      	lsls	r2, r3, #8
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	619a      	str	r2, [r3, #24]
      break;
 8004e00:	e043      	b.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fa71 	bl	80052f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0208 	orr.w	r2, r2, #8
 8004e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0204 	bic.w	r2, r2, #4
 8004e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69d9      	ldr	r1, [r3, #28]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	61da      	str	r2, [r3, #28]
      break;
 8004e40:	e023      	b.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fabb 	bl	80053c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69d9      	ldr	r1, [r3, #28]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	021a      	lsls	r2, r3, #8
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	61da      	str	r2, [r3, #28]
      break;
 8004e82:	e002      	b.n	8004e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	75fb      	strb	r3, [r7, #23]
      break;
 8004e88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e0b4      	b.n	8005022 <HAL_TIM_ConfigClockSource+0x186>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ef0:	d03e      	beq.n	8004f70 <HAL_TIM_ConfigClockSource+0xd4>
 8004ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ef6:	f200 8087 	bhi.w	8005008 <HAL_TIM_ConfigClockSource+0x16c>
 8004efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004efe:	f000 8086 	beq.w	800500e <HAL_TIM_ConfigClockSource+0x172>
 8004f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f06:	d87f      	bhi.n	8005008 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b70      	cmp	r3, #112	@ 0x70
 8004f0a:	d01a      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0xa6>
 8004f0c:	2b70      	cmp	r3, #112	@ 0x70
 8004f0e:	d87b      	bhi.n	8005008 <HAL_TIM_ConfigClockSource+0x16c>
 8004f10:	2b60      	cmp	r3, #96	@ 0x60
 8004f12:	d050      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x11a>
 8004f14:	2b60      	cmp	r3, #96	@ 0x60
 8004f16:	d877      	bhi.n	8005008 <HAL_TIM_ConfigClockSource+0x16c>
 8004f18:	2b50      	cmp	r3, #80	@ 0x50
 8004f1a:	d03c      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0xfa>
 8004f1c:	2b50      	cmp	r3, #80	@ 0x50
 8004f1e:	d873      	bhi.n	8005008 <HAL_TIM_ConfigClockSource+0x16c>
 8004f20:	2b40      	cmp	r3, #64	@ 0x40
 8004f22:	d058      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x13a>
 8004f24:	2b40      	cmp	r3, #64	@ 0x40
 8004f26:	d86f      	bhi.n	8005008 <HAL_TIM_ConfigClockSource+0x16c>
 8004f28:	2b30      	cmp	r3, #48	@ 0x30
 8004f2a:	d064      	beq.n	8004ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f2c:	2b30      	cmp	r3, #48	@ 0x30
 8004f2e:	d86b      	bhi.n	8005008 <HAL_TIM_ConfigClockSource+0x16c>
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d060      	beq.n	8004ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	d867      	bhi.n	8005008 <HAL_TIM_ConfigClockSource+0x16c>
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d05c      	beq.n	8004ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d05a      	beq.n	8004ff6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f40:	e062      	b.n	8005008 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f52:	f000 fafc 	bl	800554e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	609a      	str	r2, [r3, #8]
      break;
 8004f6e:	e04f      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f80:	f000 fae5 	bl	800554e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f92:	609a      	str	r2, [r3, #8]
      break;
 8004f94:	e03c      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f000 fa5c 	bl	8005460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2150      	movs	r1, #80	@ 0x50
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fab3 	bl	800551a <TIM_ITRx_SetConfig>
      break;
 8004fb4:	e02c      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f000 fa7a 	bl	80054bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2160      	movs	r1, #96	@ 0x60
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 faa3 	bl	800551a <TIM_ITRx_SetConfig>
      break;
 8004fd4:	e01c      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f000 fa3c 	bl	8005460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2140      	movs	r1, #64	@ 0x40
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fa93 	bl	800551a <TIM_ITRx_SetConfig>
      break;
 8004ff4:	e00c      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f000 fa8a 	bl	800551a <TIM_ITRx_SetConfig>
      break;
 8005006:	e003      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
      break;
 800500c:	e000      	b.n	8005010 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800500e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr

0800503c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr

0800504e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr
	...

08005074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a2f      	ldr	r2, [pc, #188]	@ (8005144 <TIM_Base_SetConfig+0xd0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00b      	beq.n	80050a4 <TIM_Base_SetConfig+0x30>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005092:	d007      	beq.n	80050a4 <TIM_Base_SetConfig+0x30>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a2c      	ldr	r2, [pc, #176]	@ (8005148 <TIM_Base_SetConfig+0xd4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_Base_SetConfig+0x30>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a2b      	ldr	r2, [pc, #172]	@ (800514c <TIM_Base_SetConfig+0xd8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d108      	bne.n	80050b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a22      	ldr	r2, [pc, #136]	@ (8005144 <TIM_Base_SetConfig+0xd0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00b      	beq.n	80050d6 <TIM_Base_SetConfig+0x62>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c4:	d007      	beq.n	80050d6 <TIM_Base_SetConfig+0x62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005148 <TIM_Base_SetConfig+0xd4>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d003      	beq.n	80050d6 <TIM_Base_SetConfig+0x62>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1e      	ldr	r2, [pc, #120]	@ (800514c <TIM_Base_SetConfig+0xd8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d108      	bne.n	80050e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a0d      	ldr	r2, [pc, #52]	@ (8005144 <TIM_Base_SetConfig+0xd0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d103      	bne.n	800511c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f023 0201 	bic.w	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	611a      	str	r2, [r3, #16]
  }
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr
 8005144:	40012c00 	.word	0x40012c00
 8005148:	40000400 	.word	0x40000400
 800514c:	40000800 	.word	0x40000800

08005150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	f023 0201 	bic.w	r2, r3, #1
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800517e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0303 	bic.w	r3, r3, #3
 8005186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f023 0302 	bic.w	r3, r3, #2
 8005198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005218 <TIM_OC1_SetConfig+0xc8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d10c      	bne.n	80051c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f023 0308 	bic.w	r3, r3, #8
 80051b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f023 0304 	bic.w	r3, r3, #4
 80051c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a13      	ldr	r2, [pc, #76]	@ (8005218 <TIM_OC1_SetConfig+0xc8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d111      	bne.n	80051f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	621a      	str	r2, [r3, #32]
}
 800520c:	bf00      	nop
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40012c00 	.word	0x40012c00

0800521c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f023 0210 	bic.w	r2, r3, #16
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f023 0320 	bic.w	r3, r3, #32
 8005266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a1d      	ldr	r2, [pc, #116]	@ (80052ec <TIM_OC2_SetConfig+0xd0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d10d      	bne.n	8005298 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005296:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a14      	ldr	r2, [pc, #80]	@ (80052ec <TIM_OC2_SetConfig+0xd0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d113      	bne.n	80052c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	40012c00 	.word	0x40012c00

080052f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0303 	bic.w	r3, r3, #3
 8005326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a1d      	ldr	r2, [pc, #116]	@ (80053c0 <TIM_OC3_SetConfig+0xd0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d10d      	bne.n	800536a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a14      	ldr	r2, [pc, #80]	@ (80053c0 <TIM_OC3_SetConfig+0xd0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d113      	bne.n	800539a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	621a      	str	r2, [r3, #32]
}
 80053b4:	bf00      	nop
 80053b6:	371c      	adds	r7, #28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40012c00 	.word	0x40012c00

080053c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800540e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	031b      	lsls	r3, r3, #12
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a0f      	ldr	r2, [pc, #60]	@ (800545c <TIM_OC4_SetConfig+0x98>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d109      	bne.n	8005438 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800542a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	019b      	lsls	r3, r3, #6
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr
 800545c:	40012c00 	.word	0x40012c00

08005460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f023 0201 	bic.w	r2, r3, #1
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800548a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f023 030a 	bic.w	r3, r3, #10
 800549c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr

080054bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f023 0210 	bic.w	r2, r3, #16
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	031b      	lsls	r3, r3, #12
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	621a      	str	r2, [r3, #32]
}
 8005510:	bf00      	nop
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800551a:	b480      	push	{r7}
 800551c:	b085      	sub	sp, #20
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	f043 0307 	orr.w	r3, r3, #7
 800553c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	609a      	str	r2, [r3, #8]
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr

0800554e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800554e:	b480      	push	{r7}
 8005550:	b087      	sub	sp, #28
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	607a      	str	r2, [r7, #4]
 800555a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005568:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	021a      	lsls	r2, r3, #8
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	431a      	orrs	r2, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	4313      	orrs	r3, r2
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	609a      	str	r2, [r3, #8]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 031f 	and.w	r3, r3, #31
 800559e:	2201      	movs	r2, #1
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a1a      	ldr	r2, [r3, #32]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	43db      	mvns	r3, r3
 80055ae:	401a      	ands	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a1a      	ldr	r2, [r3, #32]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	fa01 f303 	lsl.w	r3, r1, r3
 80055c4:	431a      	orrs	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e046      	b.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a16      	ldr	r2, [pc, #88]	@ (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00e      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005638:	d009      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a12      	ldr	r2, [pc, #72]	@ (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d004      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a10      	ldr	r2, [pc, #64]	@ (800568c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d10c      	bne.n	8005668 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	4313      	orrs	r3, r2
 800565e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800

08005690 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr

080056b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e042      	b.n	800574c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fc fe4a 	bl	8002374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2224      	movs	r2, #36	@ 0x24
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fcd5 	bl	80060a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800570c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695a      	ldr	r2, [r3, #20]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800571c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800572c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b20      	cmp	r3, #32
 800576c:	d112      	bne.n	8005794 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_UART_Receive_IT+0x26>
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e00b      	b.n	8005796 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	461a      	mov	r2, r3
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 fab7 	bl	8005cfe <UART_Start_Receive_IT>
 8005790:	4603      	mov	r3, r0
 8005792:	e000      	b.n	8005796 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005794:	2302      	movs	r3, #2
  }
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b0ba      	sub	sp, #232	@ 0xe8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10f      	bne.n	8005806 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <HAL_UART_IRQHandler+0x66>
 80057f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f6:	f003 0320 	and.w	r3, r3, #32
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fb93 	bl	8005f2a <UART_Receive_IT>
      return;
 8005804:	e25b      	b.n	8005cbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005806:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80de 	beq.w	80059cc <HAL_UART_IRQHandler+0x22c>
 8005810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d106      	bne.n	800582a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800581c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005820:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80d1 	beq.w	80059cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800582a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00b      	beq.n	800584e <HAL_UART_IRQHandler+0xae>
 8005836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800583a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005846:	f043 0201 	orr.w	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800584e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00b      	beq.n	8005872 <HAL_UART_IRQHandler+0xd2>
 800585a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586a:	f043 0202 	orr.w	r2, r3, #2
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <HAL_UART_IRQHandler+0xf6>
 800587e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588e:	f043 0204 	orr.w	r2, r3, #4
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d011      	beq.n	80058c6 <HAL_UART_IRQHandler+0x126>
 80058a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058be:	f043 0208 	orr.w	r2, r3, #8
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 81f2 	beq.w	8005cb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d4:	f003 0320 	and.w	r3, r3, #32
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <HAL_UART_IRQHandler+0x14e>
 80058dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fb1e 	bl	8005f2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bf14      	ite	ne
 80058fc:	2301      	movne	r3, #1
 80058fe:	2300      	moveq	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <HAL_UART_IRQHandler+0x17a>
 8005912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d04f      	beq.n	80059ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fa28 	bl	8005d70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d041      	beq.n	80059b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3314      	adds	r3, #20
 8005934:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005944:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800594c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3314      	adds	r3, #20
 8005956:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800595a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800595e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005966:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1d9      	bne.n	800592e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d013      	beq.n	80059aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005986:	4a7e      	ldr	r2, [pc, #504]	@ (8005b80 <HAL_UART_IRQHandler+0x3e0>)
 8005988:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598e:	4618      	mov	r0, r3
 8005990:	f7fc ff7e 	bl	8002890 <HAL_DMA_Abort_IT>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d016      	beq.n	80059c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059a4:	4610      	mov	r0, r2
 80059a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a8:	e00e      	b.n	80059c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f993 	bl	8005cd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	e00a      	b.n	80059c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f98f 	bl	8005cd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b8:	e006      	b.n	80059c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f98b 	bl	8005cd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80059c6:	e175      	b.n	8005cb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c8:	bf00      	nop
    return;
 80059ca:	e173      	b.n	8005cb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	f040 814f 	bne.w	8005c74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 8148 	beq.w	8005c74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8141 	beq.w	8005c74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059f2:	2300      	movs	r3, #0
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80b6 	beq.w	8005b84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8145 	beq.w	8005cb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a36:	429a      	cmp	r2, r3
 8005a38:	f080 813e 	bcs.w	8005cb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a42:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	f000 8088 	beq.w	8005b60 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a7c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a88:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1d9      	bne.n	8005a50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3314      	adds	r3, #20
 8005aa2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005aac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005aae:	f023 0301 	bic.w	r3, r3, #1
 8005ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3314      	adds	r3, #20
 8005abc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ac0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ac4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ac8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ad2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e1      	bne.n	8005a9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3314      	adds	r3, #20
 8005ade:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ae2:	e853 3f00 	ldrex	r3, [r3]
 8005ae6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ae8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3314      	adds	r3, #20
 8005af8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005afc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005afe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b02:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e3      	bne.n	8005ad8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b30:	f023 0310 	bic.w	r3, r3, #16
 8005b34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	330c      	adds	r3, #12
 8005b3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b44:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e3      	bne.n	8005b1e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fc fe5d 	bl	800281a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f8b6 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b7c:	e09c      	b.n	8005cb8 <HAL_UART_IRQHandler+0x518>
 8005b7e:	bf00      	nop
 8005b80:	08005e35 	.word	0x08005e35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 808e 	beq.w	8005cbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8089 	beq.w	8005cbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	330c      	adds	r3, #12
 8005bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005bce:	647a      	str	r2, [r7, #68]	@ 0x44
 8005bd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e3      	bne.n	8005baa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3314      	adds	r3, #20
 8005c02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c06:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e3      	bne.n	8005be2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0310 	bic.w	r3, r3, #16
 8005c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	330c      	adds	r3, #12
 8005c48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c4c:	61fa      	str	r2, [r7, #28]
 8005c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	69b9      	ldr	r1, [r7, #24]
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	617b      	str	r3, [r7, #20]
   return(result);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e3      	bne.n	8005c28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f83b 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c72:	e023      	b.n	8005cbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d009      	beq.n	8005c94 <HAL_UART_IRQHandler+0x4f4>
 8005c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f8e5 	bl	8005e5c <UART_Transmit_IT>
    return;
 8005c92:	e014      	b.n	8005cbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00e      	beq.n	8005cbe <HAL_UART_IRQHandler+0x51e>
 8005ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f924 	bl	8005efa <UART_EndTransmit_IT>
    return;
 8005cb2:	e004      	b.n	8005cbe <HAL_UART_IRQHandler+0x51e>
    return;
 8005cb4:	bf00      	nop
 8005cb6:	e002      	b.n	8005cbe <HAL_UART_IRQHandler+0x51e>
      return;
 8005cb8:	bf00      	nop
 8005cba:	e000      	b.n	8005cbe <HAL_UART_IRQHandler+0x51e>
      return;
 8005cbc:	bf00      	nop
  }
}
 8005cbe:	37e8      	adds	r7, #232	@ 0xe8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bc80      	pop	{r7}
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr

08005cfe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	88fa      	ldrh	r2, [r7, #6]
 8005d16:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	88fa      	ldrh	r2, [r7, #6]
 8005d1c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2222      	movs	r2, #34	@ 0x22
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d42:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695a      	ldr	r2, [r3, #20]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0220 	orr.w	r2, r2, #32
 8005d62:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b095      	sub	sp, #84	@ 0x54
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d98:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e5      	bne.n	8005d78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3314      	adds	r3, #20
 8005db2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f023 0301 	bic.w	r3, r3, #1
 8005dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3314      	adds	r3, #20
 8005dca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e5      	bne.n	8005dac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d119      	bne.n	8005e1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	e853 3f00 	ldrex	r3, [r3]
 8005df6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f023 0310 	bic.w	r3, r3, #16
 8005dfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e08:	61ba      	str	r2, [r7, #24]
 8005e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	6979      	ldr	r1, [r7, #20]
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	613b      	str	r3, [r7, #16]
   return(result);
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e5      	bne.n	8005de8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e2a:	bf00      	nop
 8005e2c:	3754      	adds	r7, #84	@ 0x54
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr

08005e34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff ff41 	bl	8005cd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e54:	bf00      	nop
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b21      	cmp	r3, #33	@ 0x21
 8005e6e:	d13e      	bne.n	8005eee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e78:	d114      	bne.n	8005ea4 <UART_Transmit_IT+0x48>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d110      	bne.n	8005ea4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	1c9a      	adds	r2, r3, #2
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	621a      	str	r2, [r3, #32]
 8005ea2:	e008      	b.n	8005eb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	1c59      	adds	r1, r3, #1
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6211      	str	r1, [r2, #32]
 8005eae:	781a      	ldrb	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10f      	bne.n	8005eea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ed8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ee8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	e000      	b.n	8005ef0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005eee:	2302      	movs	r3, #2
  }
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bc80      	pop	{r7}
 8005ef8:	4770      	bx	lr

08005efa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b082      	sub	sp, #8
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff fed2 	bl	8005cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b08c      	sub	sp, #48	@ 0x30
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b22      	cmp	r3, #34	@ 0x22
 8005f3c:	f040 80ae 	bne.w	800609c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f48:	d117      	bne.n	8005f7a <UART_Receive_IT+0x50>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d113      	bne.n	8005f7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f72:	1c9a      	adds	r2, r3, #2
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f78:	e026      	b.n	8005fc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8c:	d007      	beq.n	8005f9e <UART_Receive_IT+0x74>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <UART_Receive_IT+0x82>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e008      	b.n	8005fbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d15d      	bne.n	8006098 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0220 	bic.w	r2, r2, #32
 8005fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ffa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0201 	bic.w	r2, r2, #1
 800600a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601e:	2b01      	cmp	r3, #1
 8006020:	d135      	bne.n	800608e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	330c      	adds	r3, #12
 800602e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	613b      	str	r3, [r7, #16]
   return(result);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f023 0310 	bic.w	r3, r3, #16
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006048:	623a      	str	r2, [r7, #32]
 800604a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	69f9      	ldr	r1, [r7, #28]
 800604e:	6a3a      	ldr	r2, [r7, #32]
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	61bb      	str	r3, [r7, #24]
   return(result);
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e5      	bne.n	8006028 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b10      	cmp	r3, #16
 8006068:	d10a      	bne.n	8006080 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fe2e 	bl	8005ce8 <HAL_UARTEx_RxEventCallback>
 800608c:	e002      	b.n	8006094 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fc f87a 	bl	8002188 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	e002      	b.n	800609e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	e000      	b.n	800609e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800609c:	2302      	movs	r3, #2
  }
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3730      	adds	r7, #48	@ 0x30
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80060e2:	f023 030c 	bic.w	r3, r3, #12
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	430b      	orrs	r3, r1
 80060ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a2c      	ldr	r2, [pc, #176]	@ (80061bc <UART_SetConfig+0x114>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d103      	bne.n	8006118 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006110:	f7fe fb44 	bl	800479c <HAL_RCC_GetPCLK2Freq>
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	e002      	b.n	800611e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006118:	f7fe fb2c 	bl	8004774 <HAL_RCC_GetPCLK1Freq>
 800611c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	009a      	lsls	r2, r3, #2
 8006128:	441a      	add	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	fbb2 f3f3 	udiv	r3, r2, r3
 8006134:	4a22      	ldr	r2, [pc, #136]	@ (80061c0 <UART_SetConfig+0x118>)
 8006136:	fba2 2303 	umull	r2, r3, r2, r3
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	0119      	lsls	r1, r3, #4
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	009a      	lsls	r2, r3, #2
 8006148:	441a      	add	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	fbb2 f2f3 	udiv	r2, r2, r3
 8006154:	4b1a      	ldr	r3, [pc, #104]	@ (80061c0 <UART_SetConfig+0x118>)
 8006156:	fba3 0302 	umull	r0, r3, r3, r2
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	2064      	movs	r0, #100	@ 0x64
 800615e:	fb00 f303 	mul.w	r3, r0, r3
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	3332      	adds	r3, #50	@ 0x32
 8006168:	4a15      	ldr	r2, [pc, #84]	@ (80061c0 <UART_SetConfig+0x118>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006174:	4419      	add	r1, r3
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009a      	lsls	r2, r3, #2
 8006180:	441a      	add	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	fbb2 f2f3 	udiv	r2, r2, r3
 800618c:	4b0c      	ldr	r3, [pc, #48]	@ (80061c0 <UART_SetConfig+0x118>)
 800618e:	fba3 0302 	umull	r0, r3, r3, r2
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2064      	movs	r0, #100	@ 0x64
 8006196:	fb00 f303 	mul.w	r3, r0, r3
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	3332      	adds	r3, #50	@ 0x32
 80061a0:	4a07      	ldr	r2, [pc, #28]	@ (80061c0 <UART_SetConfig+0x118>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	f003 020f 	and.w	r2, r3, #15
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	440a      	add	r2, r1
 80061b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40013800 	.word	0x40013800
 80061c0:	51eb851f 	.word	0x51eb851f

080061c4 <memset>:
 80061c4:	4603      	mov	r3, r0
 80061c6:	4402      	add	r2, r0
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d100      	bne.n	80061ce <memset+0xa>
 80061cc:	4770      	bx	lr
 80061ce:	f803 1b01 	strb.w	r1, [r3], #1
 80061d2:	e7f9      	b.n	80061c8 <memset+0x4>

080061d4 <__errno>:
 80061d4:	4b01      	ldr	r3, [pc, #4]	@ (80061dc <__errno+0x8>)
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	20000074 	.word	0x20000074

080061e0 <__libc_init_array>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	2600      	movs	r6, #0
 80061e4:	4d0c      	ldr	r5, [pc, #48]	@ (8006218 <__libc_init_array+0x38>)
 80061e6:	4c0d      	ldr	r4, [pc, #52]	@ (800621c <__libc_init_array+0x3c>)
 80061e8:	1b64      	subs	r4, r4, r5
 80061ea:	10a4      	asrs	r4, r4, #2
 80061ec:	42a6      	cmp	r6, r4
 80061ee:	d109      	bne.n	8006204 <__libc_init_array+0x24>
 80061f0:	f000 fb7a 	bl	80068e8 <_init>
 80061f4:	2600      	movs	r6, #0
 80061f6:	4d0a      	ldr	r5, [pc, #40]	@ (8006220 <__libc_init_array+0x40>)
 80061f8:	4c0a      	ldr	r4, [pc, #40]	@ (8006224 <__libc_init_array+0x44>)
 80061fa:	1b64      	subs	r4, r4, r5
 80061fc:	10a4      	asrs	r4, r4, #2
 80061fe:	42a6      	cmp	r6, r4
 8006200:	d105      	bne.n	800620e <__libc_init_array+0x2e>
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	f855 3b04 	ldr.w	r3, [r5], #4
 8006208:	4798      	blx	r3
 800620a:	3601      	adds	r6, #1
 800620c:	e7ee      	b.n	80061ec <__libc_init_array+0xc>
 800620e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006212:	4798      	blx	r3
 8006214:	3601      	adds	r6, #1
 8006216:	e7f2      	b.n	80061fe <__libc_init_array+0x1e>
 8006218:	080069b0 	.word	0x080069b0
 800621c:	080069b0 	.word	0x080069b0
 8006220:	080069b0 	.word	0x080069b0
 8006224:	080069b4 	.word	0x080069b4

08006228 <atan2>:
 8006228:	f000 b8f6 	b.w	8006418 <__ieee754_atan2>

0800622c <sqrt>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	4606      	mov	r6, r0
 8006230:	460f      	mov	r7, r1
 8006232:	f000 f81f 	bl	8006274 <__ieee754_sqrt>
 8006236:	4632      	mov	r2, r6
 8006238:	4604      	mov	r4, r0
 800623a:	460d      	mov	r5, r1
 800623c:	463b      	mov	r3, r7
 800623e:	4630      	mov	r0, r6
 8006240:	4639      	mov	r1, r7
 8006242:	f7fa fbdb 	bl	80009fc <__aeabi_dcmpun>
 8006246:	b990      	cbnz	r0, 800626e <sqrt+0x42>
 8006248:	2200      	movs	r2, #0
 800624a:	2300      	movs	r3, #0
 800624c:	4630      	mov	r0, r6
 800624e:	4639      	mov	r1, r7
 8006250:	f7fa fbac 	bl	80009ac <__aeabi_dcmplt>
 8006254:	b158      	cbz	r0, 800626e <sqrt+0x42>
 8006256:	f7ff ffbd 	bl	80061d4 <__errno>
 800625a:	2321      	movs	r3, #33	@ 0x21
 800625c:	2200      	movs	r2, #0
 800625e:	6003      	str	r3, [r0, #0]
 8006260:	2300      	movs	r3, #0
 8006262:	4610      	mov	r0, r2
 8006264:	4619      	mov	r1, r3
 8006266:	f7fa fa59 	bl	800071c <__aeabi_ddiv>
 800626a:	4604      	mov	r4, r0
 800626c:	460d      	mov	r5, r1
 800626e:	4620      	mov	r0, r4
 8006270:	4629      	mov	r1, r5
 8006272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006274 <__ieee754_sqrt>:
 8006274:	4a65      	ldr	r2, [pc, #404]	@ (800640c <__ieee754_sqrt+0x198>)
 8006276:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	438a      	bics	r2, r1
 800627c:	4606      	mov	r6, r0
 800627e:	460f      	mov	r7, r1
 8006280:	460b      	mov	r3, r1
 8006282:	4604      	mov	r4, r0
 8006284:	d10e      	bne.n	80062a4 <__ieee754_sqrt+0x30>
 8006286:	4602      	mov	r2, r0
 8006288:	f7fa f91e 	bl	80004c8 <__aeabi_dmul>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4630      	mov	r0, r6
 8006292:	4639      	mov	r1, r7
 8006294:	f7f9 ff62 	bl	800015c <__adddf3>
 8006298:	4606      	mov	r6, r0
 800629a:	460f      	mov	r7, r1
 800629c:	4630      	mov	r0, r6
 800629e:	4639      	mov	r1, r7
 80062a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a4:	2900      	cmp	r1, #0
 80062a6:	dc0c      	bgt.n	80062c2 <__ieee754_sqrt+0x4e>
 80062a8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80062ac:	4302      	orrs	r2, r0
 80062ae:	d0f5      	beq.n	800629c <__ieee754_sqrt+0x28>
 80062b0:	b189      	cbz	r1, 80062d6 <__ieee754_sqrt+0x62>
 80062b2:	4602      	mov	r2, r0
 80062b4:	f7f9 ff50 	bl	8000158 <__aeabi_dsub>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	f7fa fa2e 	bl	800071c <__aeabi_ddiv>
 80062c0:	e7ea      	b.n	8006298 <__ieee754_sqrt+0x24>
 80062c2:	150a      	asrs	r2, r1, #20
 80062c4:	d115      	bne.n	80062f2 <__ieee754_sqrt+0x7e>
 80062c6:	2100      	movs	r1, #0
 80062c8:	e009      	b.n	80062de <__ieee754_sqrt+0x6a>
 80062ca:	0ae3      	lsrs	r3, r4, #11
 80062cc:	3a15      	subs	r2, #21
 80062ce:	0564      	lsls	r4, r4, #21
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0fa      	beq.n	80062ca <__ieee754_sqrt+0x56>
 80062d4:	e7f7      	b.n	80062c6 <__ieee754_sqrt+0x52>
 80062d6:	460a      	mov	r2, r1
 80062d8:	e7fa      	b.n	80062d0 <__ieee754_sqrt+0x5c>
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	3101      	adds	r1, #1
 80062de:	02d8      	lsls	r0, r3, #11
 80062e0:	d5fb      	bpl.n	80062da <__ieee754_sqrt+0x66>
 80062e2:	1e48      	subs	r0, r1, #1
 80062e4:	1a12      	subs	r2, r2, r0
 80062e6:	f1c1 0020 	rsb	r0, r1, #32
 80062ea:	fa24 f000 	lsr.w	r0, r4, r0
 80062ee:	4303      	orrs	r3, r0
 80062f0:	408c      	lsls	r4, r1
 80062f2:	2700      	movs	r7, #0
 80062f4:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 80062f8:	2116      	movs	r1, #22
 80062fa:	07d2      	lsls	r2, r2, #31
 80062fc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006300:	463a      	mov	r2, r7
 8006302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800630a:	bf5c      	itt	pl
 800630c:	005b      	lslpl	r3, r3, #1
 800630e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006312:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006316:	bf58      	it	pl
 8006318:	0064      	lslpl	r4, r4, #1
 800631a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800631e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006322:	0064      	lsls	r4, r4, #1
 8006324:	1815      	adds	r5, r2, r0
 8006326:	429d      	cmp	r5, r3
 8006328:	bfde      	ittt	le
 800632a:	182a      	addle	r2, r5, r0
 800632c:	1b5b      	suble	r3, r3, r5
 800632e:	183f      	addle	r7, r7, r0
 8006330:	0fe5      	lsrs	r5, r4, #31
 8006332:	3901      	subs	r1, #1
 8006334:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006338:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800633c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006340:	d1f0      	bne.n	8006324 <__ieee754_sqrt+0xb0>
 8006342:	460d      	mov	r5, r1
 8006344:	2620      	movs	r6, #32
 8006346:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800634a:	4293      	cmp	r3, r2
 800634c:	eb00 0c01 	add.w	ip, r0, r1
 8006350:	dc02      	bgt.n	8006358 <__ieee754_sqrt+0xe4>
 8006352:	d113      	bne.n	800637c <__ieee754_sqrt+0x108>
 8006354:	45a4      	cmp	ip, r4
 8006356:	d811      	bhi.n	800637c <__ieee754_sqrt+0x108>
 8006358:	f1bc 0f00 	cmp.w	ip, #0
 800635c:	eb0c 0100 	add.w	r1, ip, r0
 8006360:	da3e      	bge.n	80063e0 <__ieee754_sqrt+0x16c>
 8006362:	2900      	cmp	r1, #0
 8006364:	db3c      	blt.n	80063e0 <__ieee754_sqrt+0x16c>
 8006366:	f102 0e01 	add.w	lr, r2, #1
 800636a:	1a9b      	subs	r3, r3, r2
 800636c:	4672      	mov	r2, lr
 800636e:	45a4      	cmp	ip, r4
 8006370:	bf88      	it	hi
 8006372:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006376:	eba4 040c 	sub.w	r4, r4, ip
 800637a:	4405      	add	r5, r0
 800637c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006380:	3e01      	subs	r6, #1
 8006382:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006386:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800638a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800638e:	d1dc      	bne.n	800634a <__ieee754_sqrt+0xd6>
 8006390:	431c      	orrs	r4, r3
 8006392:	d01a      	beq.n	80063ca <__ieee754_sqrt+0x156>
 8006394:	4c1e      	ldr	r4, [pc, #120]	@ (8006410 <__ieee754_sqrt+0x19c>)
 8006396:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8006414 <__ieee754_sqrt+0x1a0>
 800639a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800639e:	e9d9 2300 	ldrd	r2, r3, [r9]
 80063a2:	f7f9 fed9 	bl	8000158 <__aeabi_dsub>
 80063a6:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4650      	mov	r0, sl
 80063b0:	4659      	mov	r1, fp
 80063b2:	f7fa fb05 	bl	80009c0 <__aeabi_dcmple>
 80063b6:	b140      	cbz	r0, 80063ca <__ieee754_sqrt+0x156>
 80063b8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80063bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80063c0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80063c4:	d10e      	bne.n	80063e4 <__ieee754_sqrt+0x170>
 80063c6:	4635      	mov	r5, r6
 80063c8:	3701      	adds	r7, #1
 80063ca:	107b      	asrs	r3, r7, #1
 80063cc:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80063d0:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80063d4:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 80063d8:	086b      	lsrs	r3, r5, #1
 80063da:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 80063de:	e75b      	b.n	8006298 <__ieee754_sqrt+0x24>
 80063e0:	4696      	mov	lr, r2
 80063e2:	e7c2      	b.n	800636a <__ieee754_sqrt+0xf6>
 80063e4:	f7f9 feba 	bl	800015c <__adddf3>
 80063e8:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4650      	mov	r0, sl
 80063f2:	4659      	mov	r1, fp
 80063f4:	f7fa fada 	bl	80009ac <__aeabi_dcmplt>
 80063f8:	b120      	cbz	r0, 8006404 <__ieee754_sqrt+0x190>
 80063fa:	1cab      	adds	r3, r5, #2
 80063fc:	bf08      	it	eq
 80063fe:	3701      	addeq	r7, #1
 8006400:	3502      	adds	r5, #2
 8006402:	e7e2      	b.n	80063ca <__ieee754_sqrt+0x156>
 8006404:	1c6b      	adds	r3, r5, #1
 8006406:	f023 0501 	bic.w	r5, r3, #1
 800640a:	e7de      	b.n	80063ca <__ieee754_sqrt+0x156>
 800640c:	7ff00000 	.word	0x7ff00000
 8006410:	08006938 	.word	0x08006938
 8006414:	08006930 	.word	0x08006930

08006418 <__ieee754_atan2>:
 8006418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	4617      	mov	r7, r2
 800641e:	4690      	mov	r8, r2
 8006420:	4699      	mov	r9, r3
 8006422:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006426:	427b      	negs	r3, r7
 8006428:	f8df a184 	ldr.w	sl, [pc, #388]	@ 80065b0 <__ieee754_atan2+0x198>
 800642c:	433b      	orrs	r3, r7
 800642e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006432:	4553      	cmp	r3, sl
 8006434:	4604      	mov	r4, r0
 8006436:	460d      	mov	r5, r1
 8006438:	d809      	bhi.n	800644e <__ieee754_atan2+0x36>
 800643a:	4246      	negs	r6, r0
 800643c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006440:	4306      	orrs	r6, r0
 8006442:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006446:	4556      	cmp	r6, sl
 8006448:	468e      	mov	lr, r1
 800644a:	4683      	mov	fp, r0
 800644c:	d908      	bls.n	8006460 <__ieee754_atan2+0x48>
 800644e:	4642      	mov	r2, r8
 8006450:	464b      	mov	r3, r9
 8006452:	4620      	mov	r0, r4
 8006454:	4629      	mov	r1, r5
 8006456:	f7f9 fe81 	bl	800015c <__adddf3>
 800645a:	4604      	mov	r4, r0
 800645c:	460d      	mov	r5, r1
 800645e:	e016      	b.n	800648e <__ieee754_atan2+0x76>
 8006460:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8006464:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8006468:	433e      	orrs	r6, r7
 800646a:	d103      	bne.n	8006474 <__ieee754_atan2+0x5c>
 800646c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006470:	f000 b8a6 	b.w	80065c0 <atan>
 8006474:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8006478:	f006 0602 	and.w	r6, r6, #2
 800647c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8006480:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006484:	d107      	bne.n	8006496 <__ieee754_atan2+0x7e>
 8006486:	2e02      	cmp	r6, #2
 8006488:	d064      	beq.n	8006554 <__ieee754_atan2+0x13c>
 800648a:	2e03      	cmp	r6, #3
 800648c:	d066      	beq.n	800655c <__ieee754_atan2+0x144>
 800648e:	4620      	mov	r0, r4
 8006490:	4629      	mov	r1, r5
 8006492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006496:	4317      	orrs	r7, r2
 8006498:	d106      	bne.n	80064a8 <__ieee754_atan2+0x90>
 800649a:	f1be 0f00 	cmp.w	lr, #0
 800649e:	db68      	blt.n	8006572 <__ieee754_atan2+0x15a>
 80064a0:	a537      	add	r5, pc, #220	@ (adr r5, 8006580 <__ieee754_atan2+0x168>)
 80064a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80064a6:	e7f2      	b.n	800648e <__ieee754_atan2+0x76>
 80064a8:	4552      	cmp	r2, sl
 80064aa:	d10f      	bne.n	80064cc <__ieee754_atan2+0xb4>
 80064ac:	4293      	cmp	r3, r2
 80064ae:	f106 36ff 	add.w	r6, r6, #4294967295
 80064b2:	d107      	bne.n	80064c4 <__ieee754_atan2+0xac>
 80064b4:	2e02      	cmp	r6, #2
 80064b6:	d855      	bhi.n	8006564 <__ieee754_atan2+0x14c>
 80064b8:	4b3e      	ldr	r3, [pc, #248]	@ (80065b4 <__ieee754_atan2+0x19c>)
 80064ba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064be:	e9d3 4500 	ldrd	r4, r5, [r3]
 80064c2:	e7e4      	b.n	800648e <__ieee754_atan2+0x76>
 80064c4:	2e02      	cmp	r6, #2
 80064c6:	d851      	bhi.n	800656c <__ieee754_atan2+0x154>
 80064c8:	4b3b      	ldr	r3, [pc, #236]	@ (80065b8 <__ieee754_atan2+0x1a0>)
 80064ca:	e7f6      	b.n	80064ba <__ieee754_atan2+0xa2>
 80064cc:	4553      	cmp	r3, sl
 80064ce:	d0e4      	beq.n	800649a <__ieee754_atan2+0x82>
 80064d0:	1a9b      	subs	r3, r3, r2
 80064d2:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80064d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80064da:	da21      	bge.n	8006520 <__ieee754_atan2+0x108>
 80064dc:	f1b9 0f00 	cmp.w	r9, #0
 80064e0:	da01      	bge.n	80064e6 <__ieee754_atan2+0xce>
 80064e2:	323c      	adds	r2, #60	@ 0x3c
 80064e4:	db20      	blt.n	8006528 <__ieee754_atan2+0x110>
 80064e6:	4642      	mov	r2, r8
 80064e8:	464b      	mov	r3, r9
 80064ea:	4620      	mov	r0, r4
 80064ec:	4629      	mov	r1, r5
 80064ee:	f7fa f915 	bl	800071c <__aeabi_ddiv>
 80064f2:	f000 f9f5 	bl	80068e0 <fabs>
 80064f6:	f000 f863 	bl	80065c0 <atan>
 80064fa:	4604      	mov	r4, r0
 80064fc:	460d      	mov	r5, r1
 80064fe:	2e01      	cmp	r6, #1
 8006500:	d015      	beq.n	800652e <__ieee754_atan2+0x116>
 8006502:	2e02      	cmp	r6, #2
 8006504:	d017      	beq.n	8006536 <__ieee754_atan2+0x11e>
 8006506:	2e00      	cmp	r6, #0
 8006508:	d0c1      	beq.n	800648e <__ieee754_atan2+0x76>
 800650a:	a31f      	add	r3, pc, #124	@ (adr r3, 8006588 <__ieee754_atan2+0x170>)
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	4620      	mov	r0, r4
 8006512:	4629      	mov	r1, r5
 8006514:	f7f9 fe20 	bl	8000158 <__aeabi_dsub>
 8006518:	a31d      	add	r3, pc, #116	@ (adr r3, 8006590 <__ieee754_atan2+0x178>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	e016      	b.n	800654e <__ieee754_atan2+0x136>
 8006520:	a517      	add	r5, pc, #92	@ (adr r5, 8006580 <__ieee754_atan2+0x168>)
 8006522:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006526:	e7ea      	b.n	80064fe <__ieee754_atan2+0xe6>
 8006528:	2400      	movs	r4, #0
 800652a:	2500      	movs	r5, #0
 800652c:	e7e7      	b.n	80064fe <__ieee754_atan2+0xe6>
 800652e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8006532:	461d      	mov	r5, r3
 8006534:	e7ab      	b.n	800648e <__ieee754_atan2+0x76>
 8006536:	a314      	add	r3, pc, #80	@ (adr r3, 8006588 <__ieee754_atan2+0x170>)
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	4620      	mov	r0, r4
 800653e:	4629      	mov	r1, r5
 8006540:	f7f9 fe0a 	bl	8000158 <__aeabi_dsub>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	a111      	add	r1, pc, #68	@ (adr r1, 8006590 <__ieee754_atan2+0x178>)
 800654a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800654e:	f7f9 fe03 	bl	8000158 <__aeabi_dsub>
 8006552:	e782      	b.n	800645a <__ieee754_atan2+0x42>
 8006554:	a50e      	add	r5, pc, #56	@ (adr r5, 8006590 <__ieee754_atan2+0x178>)
 8006556:	e9d5 4500 	ldrd	r4, r5, [r5]
 800655a:	e798      	b.n	800648e <__ieee754_atan2+0x76>
 800655c:	a50e      	add	r5, pc, #56	@ (adr r5, 8006598 <__ieee754_atan2+0x180>)
 800655e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006562:	e794      	b.n	800648e <__ieee754_atan2+0x76>
 8006564:	a50e      	add	r5, pc, #56	@ (adr r5, 80065a0 <__ieee754_atan2+0x188>)
 8006566:	e9d5 4500 	ldrd	r4, r5, [r5]
 800656a:	e790      	b.n	800648e <__ieee754_atan2+0x76>
 800656c:	2400      	movs	r4, #0
 800656e:	2500      	movs	r5, #0
 8006570:	e78d      	b.n	800648e <__ieee754_atan2+0x76>
 8006572:	a50d      	add	r5, pc, #52	@ (adr r5, 80065a8 <__ieee754_atan2+0x190>)
 8006574:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006578:	e789      	b.n	800648e <__ieee754_atan2+0x76>
 800657a:	bf00      	nop
 800657c:	f3af 8000 	nop.w
 8006580:	54442d18 	.word	0x54442d18
 8006584:	3ff921fb 	.word	0x3ff921fb
 8006588:	33145c07 	.word	0x33145c07
 800658c:	3ca1a626 	.word	0x3ca1a626
 8006590:	54442d18 	.word	0x54442d18
 8006594:	400921fb 	.word	0x400921fb
 8006598:	54442d18 	.word	0x54442d18
 800659c:	c00921fb 	.word	0xc00921fb
 80065a0:	54442d18 	.word	0x54442d18
 80065a4:	3fe921fb 	.word	0x3fe921fb
 80065a8:	54442d18 	.word	0x54442d18
 80065ac:	bff921fb 	.word	0xbff921fb
 80065b0:	7ff00000 	.word	0x7ff00000
 80065b4:	08006958 	.word	0x08006958
 80065b8:	08006940 	.word	0x08006940
 80065bc:	00000000 	.word	0x00000000

080065c0 <atan>:
 80065c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	4bbc      	ldr	r3, [pc, #752]	@ (80068b8 <atan+0x2f8>)
 80065c6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80065ca:	429e      	cmp	r6, r3
 80065cc:	4604      	mov	r4, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	468b      	mov	fp, r1
 80065d2:	d918      	bls.n	8006606 <atan+0x46>
 80065d4:	4bb9      	ldr	r3, [pc, #740]	@ (80068bc <atan+0x2fc>)
 80065d6:	429e      	cmp	r6, r3
 80065d8:	d801      	bhi.n	80065de <atan+0x1e>
 80065da:	d109      	bne.n	80065f0 <atan+0x30>
 80065dc:	b140      	cbz	r0, 80065f0 <atan+0x30>
 80065de:	4622      	mov	r2, r4
 80065e0:	462b      	mov	r3, r5
 80065e2:	4620      	mov	r0, r4
 80065e4:	4629      	mov	r1, r5
 80065e6:	f7f9 fdb9 	bl	800015c <__adddf3>
 80065ea:	4604      	mov	r4, r0
 80065ec:	460d      	mov	r5, r1
 80065ee:	e006      	b.n	80065fe <atan+0x3e>
 80065f0:	f1bb 0f00 	cmp.w	fp, #0
 80065f4:	f340 8123 	ble.w	800683e <atan+0x27e>
 80065f8:	a593      	add	r5, pc, #588	@ (adr r5, 8006848 <atan+0x288>)
 80065fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80065fe:	4620      	mov	r0, r4
 8006600:	4629      	mov	r1, r5
 8006602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006606:	4bae      	ldr	r3, [pc, #696]	@ (80068c0 <atan+0x300>)
 8006608:	429e      	cmp	r6, r3
 800660a:	d811      	bhi.n	8006630 <atan+0x70>
 800660c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006610:	429e      	cmp	r6, r3
 8006612:	d80a      	bhi.n	800662a <atan+0x6a>
 8006614:	a38e      	add	r3, pc, #568	@ (adr r3, 8006850 <atan+0x290>)
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	f7f9 fd9f 	bl	800015c <__adddf3>
 800661e:	2200      	movs	r2, #0
 8006620:	4ba8      	ldr	r3, [pc, #672]	@ (80068c4 <atan+0x304>)
 8006622:	f7fa f9e1 	bl	80009e8 <__aeabi_dcmpgt>
 8006626:	2800      	cmp	r0, #0
 8006628:	d1e9      	bne.n	80065fe <atan+0x3e>
 800662a:	f04f 3aff 	mov.w	sl, #4294967295
 800662e:	e027      	b.n	8006680 <atan+0xc0>
 8006630:	f000 f956 	bl	80068e0 <fabs>
 8006634:	4ba4      	ldr	r3, [pc, #656]	@ (80068c8 <atan+0x308>)
 8006636:	4604      	mov	r4, r0
 8006638:	429e      	cmp	r6, r3
 800663a:	460d      	mov	r5, r1
 800663c:	f200 80b8 	bhi.w	80067b0 <atan+0x1f0>
 8006640:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006644:	429e      	cmp	r6, r3
 8006646:	f200 809c 	bhi.w	8006782 <atan+0x1c2>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	f7f9 fd85 	bl	800015c <__adddf3>
 8006652:	2200      	movs	r2, #0
 8006654:	4b9b      	ldr	r3, [pc, #620]	@ (80068c4 <atan+0x304>)
 8006656:	f7f9 fd7f 	bl	8000158 <__aeabi_dsub>
 800665a:	2200      	movs	r2, #0
 800665c:	4606      	mov	r6, r0
 800665e:	460f      	mov	r7, r1
 8006660:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006664:	4620      	mov	r0, r4
 8006666:	4629      	mov	r1, r5
 8006668:	f7f9 fd78 	bl	800015c <__adddf3>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4630      	mov	r0, r6
 8006672:	4639      	mov	r1, r7
 8006674:	f7fa f852 	bl	800071c <__aeabi_ddiv>
 8006678:	f04f 0a00 	mov.w	sl, #0
 800667c:	4604      	mov	r4, r0
 800667e:	460d      	mov	r5, r1
 8006680:	4622      	mov	r2, r4
 8006682:	462b      	mov	r3, r5
 8006684:	4620      	mov	r0, r4
 8006686:	4629      	mov	r1, r5
 8006688:	f7f9 ff1e 	bl	80004c8 <__aeabi_dmul>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4680      	mov	r8, r0
 8006692:	4689      	mov	r9, r1
 8006694:	f7f9 ff18 	bl	80004c8 <__aeabi_dmul>
 8006698:	a36f      	add	r3, pc, #444	@ (adr r3, 8006858 <atan+0x298>)
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	4606      	mov	r6, r0
 80066a0:	460f      	mov	r7, r1
 80066a2:	f7f9 ff11 	bl	80004c8 <__aeabi_dmul>
 80066a6:	a36e      	add	r3, pc, #440	@ (adr r3, 8006860 <atan+0x2a0>)
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	f7f9 fd56 	bl	800015c <__adddf3>
 80066b0:	4632      	mov	r2, r6
 80066b2:	463b      	mov	r3, r7
 80066b4:	f7f9 ff08 	bl	80004c8 <__aeabi_dmul>
 80066b8:	a36b      	add	r3, pc, #428	@ (adr r3, 8006868 <atan+0x2a8>)
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	f7f9 fd4d 	bl	800015c <__adddf3>
 80066c2:	4632      	mov	r2, r6
 80066c4:	463b      	mov	r3, r7
 80066c6:	f7f9 feff 	bl	80004c8 <__aeabi_dmul>
 80066ca:	a369      	add	r3, pc, #420	@ (adr r3, 8006870 <atan+0x2b0>)
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	f7f9 fd44 	bl	800015c <__adddf3>
 80066d4:	4632      	mov	r2, r6
 80066d6:	463b      	mov	r3, r7
 80066d8:	f7f9 fef6 	bl	80004c8 <__aeabi_dmul>
 80066dc:	a366      	add	r3, pc, #408	@ (adr r3, 8006878 <atan+0x2b8>)
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	f7f9 fd3b 	bl	800015c <__adddf3>
 80066e6:	4632      	mov	r2, r6
 80066e8:	463b      	mov	r3, r7
 80066ea:	f7f9 feed 	bl	80004c8 <__aeabi_dmul>
 80066ee:	a364      	add	r3, pc, #400	@ (adr r3, 8006880 <atan+0x2c0>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f7f9 fd32 	bl	800015c <__adddf3>
 80066f8:	4642      	mov	r2, r8
 80066fa:	464b      	mov	r3, r9
 80066fc:	f7f9 fee4 	bl	80004c8 <__aeabi_dmul>
 8006700:	a361      	add	r3, pc, #388	@ (adr r3, 8006888 <atan+0x2c8>)
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	4680      	mov	r8, r0
 8006708:	4689      	mov	r9, r1
 800670a:	4630      	mov	r0, r6
 800670c:	4639      	mov	r1, r7
 800670e:	f7f9 fedb 	bl	80004c8 <__aeabi_dmul>
 8006712:	a35f      	add	r3, pc, #380	@ (adr r3, 8006890 <atan+0x2d0>)
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f7f9 fd1e 	bl	8000158 <__aeabi_dsub>
 800671c:	4632      	mov	r2, r6
 800671e:	463b      	mov	r3, r7
 8006720:	f7f9 fed2 	bl	80004c8 <__aeabi_dmul>
 8006724:	a35c      	add	r3, pc, #368	@ (adr r3, 8006898 <atan+0x2d8>)
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f7f9 fd15 	bl	8000158 <__aeabi_dsub>
 800672e:	4632      	mov	r2, r6
 8006730:	463b      	mov	r3, r7
 8006732:	f7f9 fec9 	bl	80004c8 <__aeabi_dmul>
 8006736:	a35a      	add	r3, pc, #360	@ (adr r3, 80068a0 <atan+0x2e0>)
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	f7f9 fd0c 	bl	8000158 <__aeabi_dsub>
 8006740:	4632      	mov	r2, r6
 8006742:	463b      	mov	r3, r7
 8006744:	f7f9 fec0 	bl	80004c8 <__aeabi_dmul>
 8006748:	a357      	add	r3, pc, #348	@ (adr r3, 80068a8 <atan+0x2e8>)
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	f7f9 fd03 	bl	8000158 <__aeabi_dsub>
 8006752:	4632      	mov	r2, r6
 8006754:	463b      	mov	r3, r7
 8006756:	f7f9 feb7 	bl	80004c8 <__aeabi_dmul>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4640      	mov	r0, r8
 8006760:	4649      	mov	r1, r9
 8006762:	f7f9 fcfb 	bl	800015c <__adddf3>
 8006766:	4622      	mov	r2, r4
 8006768:	462b      	mov	r3, r5
 800676a:	f7f9 fead 	bl	80004c8 <__aeabi_dmul>
 800676e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	d144      	bne.n	8006802 <atan+0x242>
 8006778:	4620      	mov	r0, r4
 800677a:	4629      	mov	r1, r5
 800677c:	f7f9 fcec 	bl	8000158 <__aeabi_dsub>
 8006780:	e733      	b.n	80065ea <atan+0x2a>
 8006782:	2200      	movs	r2, #0
 8006784:	4b4f      	ldr	r3, [pc, #316]	@ (80068c4 <atan+0x304>)
 8006786:	f7f9 fce7 	bl	8000158 <__aeabi_dsub>
 800678a:	2200      	movs	r2, #0
 800678c:	4606      	mov	r6, r0
 800678e:	460f      	mov	r7, r1
 8006790:	4620      	mov	r0, r4
 8006792:	4629      	mov	r1, r5
 8006794:	4b4b      	ldr	r3, [pc, #300]	@ (80068c4 <atan+0x304>)
 8006796:	f7f9 fce1 	bl	800015c <__adddf3>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4630      	mov	r0, r6
 80067a0:	4639      	mov	r1, r7
 80067a2:	f7f9 ffbb 	bl	800071c <__aeabi_ddiv>
 80067a6:	f04f 0a01 	mov.w	sl, #1
 80067aa:	4604      	mov	r4, r0
 80067ac:	460d      	mov	r5, r1
 80067ae:	e767      	b.n	8006680 <atan+0xc0>
 80067b0:	4b46      	ldr	r3, [pc, #280]	@ (80068cc <atan+0x30c>)
 80067b2:	429e      	cmp	r6, r3
 80067b4:	d21a      	bcs.n	80067ec <atan+0x22c>
 80067b6:	2200      	movs	r2, #0
 80067b8:	4b45      	ldr	r3, [pc, #276]	@ (80068d0 <atan+0x310>)
 80067ba:	f7f9 fccd 	bl	8000158 <__aeabi_dsub>
 80067be:	2200      	movs	r2, #0
 80067c0:	4606      	mov	r6, r0
 80067c2:	460f      	mov	r7, r1
 80067c4:	4620      	mov	r0, r4
 80067c6:	4629      	mov	r1, r5
 80067c8:	4b41      	ldr	r3, [pc, #260]	@ (80068d0 <atan+0x310>)
 80067ca:	f7f9 fe7d 	bl	80004c8 <__aeabi_dmul>
 80067ce:	2200      	movs	r2, #0
 80067d0:	4b3c      	ldr	r3, [pc, #240]	@ (80068c4 <atan+0x304>)
 80067d2:	f7f9 fcc3 	bl	800015c <__adddf3>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4630      	mov	r0, r6
 80067dc:	4639      	mov	r1, r7
 80067de:	f7f9 ff9d 	bl	800071c <__aeabi_ddiv>
 80067e2:	f04f 0a02 	mov.w	sl, #2
 80067e6:	4604      	mov	r4, r0
 80067e8:	460d      	mov	r5, r1
 80067ea:	e749      	b.n	8006680 <atan+0xc0>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	2000      	movs	r0, #0
 80067f2:	4938      	ldr	r1, [pc, #224]	@ (80068d4 <atan+0x314>)
 80067f4:	f7f9 ff92 	bl	800071c <__aeabi_ddiv>
 80067f8:	f04f 0a03 	mov.w	sl, #3
 80067fc:	4604      	mov	r4, r0
 80067fe:	460d      	mov	r5, r1
 8006800:	e73e      	b.n	8006680 <atan+0xc0>
 8006802:	4b35      	ldr	r3, [pc, #212]	@ (80068d8 <atan+0x318>)
 8006804:	4e35      	ldr	r6, [pc, #212]	@ (80068dc <atan+0x31c>)
 8006806:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	f7f9 fca3 	bl	8000158 <__aeabi_dsub>
 8006812:	4622      	mov	r2, r4
 8006814:	462b      	mov	r3, r5
 8006816:	f7f9 fc9f 	bl	8000158 <__aeabi_dsub>
 800681a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006826:	f7f9 fc97 	bl	8000158 <__aeabi_dsub>
 800682a:	f1bb 0f00 	cmp.w	fp, #0
 800682e:	4604      	mov	r4, r0
 8006830:	460d      	mov	r5, r1
 8006832:	f6bf aee4 	bge.w	80065fe <atan+0x3e>
 8006836:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800683a:	461d      	mov	r5, r3
 800683c:	e6df      	b.n	80065fe <atan+0x3e>
 800683e:	a51c      	add	r5, pc, #112	@ (adr r5, 80068b0 <atan+0x2f0>)
 8006840:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006844:	e6db      	b.n	80065fe <atan+0x3e>
 8006846:	bf00      	nop
 8006848:	54442d18 	.word	0x54442d18
 800684c:	3ff921fb 	.word	0x3ff921fb
 8006850:	8800759c 	.word	0x8800759c
 8006854:	7e37e43c 	.word	0x7e37e43c
 8006858:	e322da11 	.word	0xe322da11
 800685c:	3f90ad3a 	.word	0x3f90ad3a
 8006860:	24760deb 	.word	0x24760deb
 8006864:	3fa97b4b 	.word	0x3fa97b4b
 8006868:	a0d03d51 	.word	0xa0d03d51
 800686c:	3fb10d66 	.word	0x3fb10d66
 8006870:	c54c206e 	.word	0xc54c206e
 8006874:	3fb745cd 	.word	0x3fb745cd
 8006878:	920083ff 	.word	0x920083ff
 800687c:	3fc24924 	.word	0x3fc24924
 8006880:	5555550d 	.word	0x5555550d
 8006884:	3fd55555 	.word	0x3fd55555
 8006888:	2c6a6c2f 	.word	0x2c6a6c2f
 800688c:	bfa2b444 	.word	0xbfa2b444
 8006890:	52defd9a 	.word	0x52defd9a
 8006894:	3fadde2d 	.word	0x3fadde2d
 8006898:	af749a6d 	.word	0xaf749a6d
 800689c:	3fb3b0f2 	.word	0x3fb3b0f2
 80068a0:	fe231671 	.word	0xfe231671
 80068a4:	3fbc71c6 	.word	0x3fbc71c6
 80068a8:	9998ebc4 	.word	0x9998ebc4
 80068ac:	3fc99999 	.word	0x3fc99999
 80068b0:	54442d18 	.word	0x54442d18
 80068b4:	bff921fb 	.word	0xbff921fb
 80068b8:	440fffff 	.word	0x440fffff
 80068bc:	7ff00000 	.word	0x7ff00000
 80068c0:	3fdbffff 	.word	0x3fdbffff
 80068c4:	3ff00000 	.word	0x3ff00000
 80068c8:	3ff2ffff 	.word	0x3ff2ffff
 80068cc:	40038000 	.word	0x40038000
 80068d0:	3ff80000 	.word	0x3ff80000
 80068d4:	bff00000 	.word	0xbff00000
 80068d8:	08006970 	.word	0x08006970
 80068dc:	08006990 	.word	0x08006990

080068e0 <fabs>:
 80068e0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80068e4:	4619      	mov	r1, r3
 80068e6:	4770      	bx	lr

080068e8 <_init>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	bf00      	nop
 80068ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ee:	bc08      	pop	{r3}
 80068f0:	469e      	mov	lr, r3
 80068f2:	4770      	bx	lr

080068f4 <_fini>:
 80068f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f6:	bf00      	nop
 80068f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fa:	bc08      	pop	{r3}
 80068fc:	469e      	mov	lr, r3
 80068fe:	4770      	bx	lr
